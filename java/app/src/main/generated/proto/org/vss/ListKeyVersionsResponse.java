// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vss.proto

// Protobuf Java Version: 3.25.5
package org.vss;

/**
 * <pre>
 * Server response for `ListKeyVersions` API.
 * </pre>
 * <p>
 * Protobuf type {@code vss.ListKeyVersionsResponse}
 */
public final class ListKeyVersionsResponse extends
		com.google.protobuf.GeneratedMessageV3 implements
		// @@protoc_insertion_point(message_implements:vss.ListKeyVersionsResponse)
		ListKeyVersionsResponseOrBuilder {
	private static final long serialVersionUID = 0L;

	// Use ListKeyVersionsResponse.newBuilder() to construct.
	private ListKeyVersionsResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
		super(builder);
	}

	private ListKeyVersionsResponse() {
		keyVersions_ = java.util.Collections.emptyList();
		nextPageToken_ = "";
	}

	@java.lang.Override
	@SuppressWarnings({"unused"})
	protected java.lang.Object newInstance(
			UnusedPrivateParameter unused) {
		return new ListKeyVersionsResponse();
	}

	public static final com.google.protobuf.Descriptors.Descriptor
	getDescriptor() {
		return org.vss.Vss.internal_static_vss_ListKeyVersionsResponse_descriptor;
	}

	@java.lang.Override
	protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
	internalGetFieldAccessorTable() {
		return org.vss.Vss.internal_static_vss_ListKeyVersionsResponse_fieldAccessorTable
				.ensureFieldAccessorsInitialized(
						org.vss.ListKeyVersionsResponse.class, org.vss.ListKeyVersionsResponse.Builder.class);
	}

	private int bitField0_;
	public static final int KEY_VERSIONS_FIELD_NUMBER = 1;
	@SuppressWarnings("serial")
	private java.util.List<org.vss.KeyValue> keyVersions_;

	/**
	 * <pre>
	 * Fetched keys and versions.
	 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue key_versions = 1;</code>
	 */
	@java.lang.Override
	public java.util.List<org.vss.KeyValue> getKeyVersionsList() {
		return keyVersions_;
	}

	/**
	 * <pre>
	 * Fetched keys and versions.
	 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue key_versions = 1;</code>
	 */
	@java.lang.Override
	public java.util.List<? extends org.vss.KeyValueOrBuilder>
	getKeyVersionsOrBuilderList() {
		return keyVersions_;
	}

	/**
	 * <pre>
	 * Fetched keys and versions.
	 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue key_versions = 1;</code>
	 */
	@java.lang.Override
	public int getKeyVersionsCount() {
		return keyVersions_.size();
	}

	/**
	 * <pre>
	 * Fetched keys and versions.
	 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue key_versions = 1;</code>
	 */
	@java.lang.Override
	public org.vss.KeyValue getKeyVersions(int index) {
		return keyVersions_.get(index);
	}

	/**
	 * <pre>
	 * Fetched keys and versions.
	 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue key_versions = 1;</code>
	 */
	@java.lang.Override
	public org.vss.KeyValueOrBuilder getKeyVersionsOrBuilder(
			int index) {
		return keyVersions_.get(index);
	}

	public static final int NEXT_PAGE_TOKEN_FIELD_NUMBER = 2;
	@SuppressWarnings("serial")
	private volatile java.lang.Object nextPageToken_ = "";

	/**
	 * <pre>
	 * `next_page_token` is a pagination token, used to retrieve the next page of results.
	 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
	 * this value as the `page_token` in the next request.
	 *
	 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
	 * there is no more data to be retrieved.
	 *
	 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
	 * result set. The only way to know when you have reached the end of the result set is when
	 * `next_page_token` is empty.
	 *
	 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
	 * paginated response.
	 * </pre>
	 *
	 * <code>optional string next_page_token = 2;</code>
	 *
	 * @return Whether the nextPageToken field is set.
	 */
	@java.lang.Override
	public boolean hasNextPageToken() {
		return ((bitField0_ & 0x00000001) != 0);
	}

	/**
	 * <pre>
	 * `next_page_token` is a pagination token, used to retrieve the next page of results.
	 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
	 * this value as the `page_token` in the next request.
	 *
	 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
	 * there is no more data to be retrieved.
	 *
	 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
	 * result set. The only way to know when you have reached the end of the result set is when
	 * `next_page_token` is empty.
	 *
	 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
	 * paginated response.
	 * </pre>
	 *
	 * <code>optional string next_page_token = 2;</code>
	 *
	 * @return The nextPageToken.
	 */
	@java.lang.Override
	public java.lang.String getNextPageToken() {
		java.lang.Object ref = nextPageToken_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs =
					(com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			nextPageToken_ = s;
			return s;
		}
	}

	/**
	 * <pre>
	 * `next_page_token` is a pagination token, used to retrieve the next page of results.
	 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
	 * this value as the `page_token` in the next request.
	 *
	 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
	 * there is no more data to be retrieved.
	 *
	 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
	 * result set. The only way to know when you have reached the end of the result set is when
	 * `next_page_token` is empty.
	 *
	 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
	 * paginated response.
	 * </pre>
	 *
	 * <code>optional string next_page_token = 2;</code>
	 *
	 * @return The bytes for nextPageToken.
	 */
	@java.lang.Override
	public com.google.protobuf.ByteString
	getNextPageTokenBytes() {
		java.lang.Object ref = nextPageToken_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b =
					com.google.protobuf.ByteString.copyFromUtf8(
							(java.lang.String) ref);
			nextPageToken_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	public static final int GLOBAL_VERSION_FIELD_NUMBER = 3;
	private long globalVersion_ = 0L;

	/**
	 * <pre>
	 * `global_version` is a sequence-number/version of the whole store.
	 *
	 * `global_version` is only returned in response for the first page of the `ListKeyVersionsResponse`
	 * and is guaranteed to be read before reading any key-versions.
	 *
	 * In case of refreshing the complete key-version view on the client-side, correct usage for
	 * the returned `global_version` is as following:
	 *   1. Read `global_version` from the first page of paginated response and save it as local variable.
	 *   2. Update all the `key_versions` on client-side from all the pages of paginated response.
	 *   3. Update `global_version` on client_side from the local variable saved in step-1.
	 * This ensures that on client-side, all current `key_versions` were stored at `global_version` or later.
	 * This guarantee is helpful for ensuring the versioning correctness if using the `global_version`
	 * in `PutObject` API and can help avoid the race conditions related to it.
	 * </pre>
	 *
	 * <code>optional int64 global_version = 3;</code>
	 *
	 * @return Whether the globalVersion field is set.
	 */
	@java.lang.Override
	public boolean hasGlobalVersion() {
		return ((bitField0_ & 0x00000002) != 0);
	}

	/**
	 * <pre>
	 * `global_version` is a sequence-number/version of the whole store.
	 *
	 * `global_version` is only returned in response for the first page of the `ListKeyVersionsResponse`
	 * and is guaranteed to be read before reading any key-versions.
	 *
	 * In case of refreshing the complete key-version view on the client-side, correct usage for
	 * the returned `global_version` is as following:
	 *   1. Read `global_version` from the first page of paginated response and save it as local variable.
	 *   2. Update all the `key_versions` on client-side from all the pages of paginated response.
	 *   3. Update `global_version` on client_side from the local variable saved in step-1.
	 * This ensures that on client-side, all current `key_versions` were stored at `global_version` or later.
	 * This guarantee is helpful for ensuring the versioning correctness if using the `global_version`
	 * in `PutObject` API and can help avoid the race conditions related to it.
	 * </pre>
	 *
	 * <code>optional int64 global_version = 3;</code>
	 *
	 * @return The globalVersion.
	 */
	@java.lang.Override
	public long getGlobalVersion() {
		return globalVersion_;
	}

	private byte memoizedIsInitialized = -1;

	@java.lang.Override
	public final boolean isInitialized() {
		byte isInitialized = memoizedIsInitialized;
		if (isInitialized == 1) return true;
		if (isInitialized == 0) return false;

		memoizedIsInitialized = 1;
		return true;
	}

	@java.lang.Override
	public void writeTo(com.google.protobuf.CodedOutputStream output)
			throws java.io.IOException {
		for (int i = 0; i < keyVersions_.size(); i++) {
			output.writeMessage(1, keyVersions_.get(i));
		}
		if (((bitField0_ & 0x00000001) != 0)) {
			com.google.protobuf.GeneratedMessageV3.writeString(output, 2, nextPageToken_);
		}
		if (((bitField0_ & 0x00000002) != 0)) {
			output.writeInt64(3, globalVersion_);
		}
		getUnknownFields().writeTo(output);
	}

	@java.lang.Override
	public int getSerializedSize() {
		int size = memoizedSize;
		if (size != -1) return size;

		size = 0;
		for (int i = 0; i < keyVersions_.size(); i++) {
			size += com.google.protobuf.CodedOutputStream
					.computeMessageSize(1, keyVersions_.get(i));
		}
		if (((bitField0_ & 0x00000001) != 0)) {
			size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, nextPageToken_);
		}
		if (((bitField0_ & 0x00000002) != 0)) {
			size += com.google.protobuf.CodedOutputStream
					.computeInt64Size(3, globalVersion_);
		}
		size += getUnknownFields().getSerializedSize();
		memoizedSize = size;
		return size;
	}

	@java.lang.Override
	public boolean equals(final java.lang.Object obj) {
		if (obj == this) {
			return true;
		}
		if (!(obj instanceof org.vss.ListKeyVersionsResponse)) {
			return super.equals(obj);
		}
		org.vss.ListKeyVersionsResponse other = (org.vss.ListKeyVersionsResponse) obj;

		if (!getKeyVersionsList()
				.equals(other.getKeyVersionsList())) return false;
		if (hasNextPageToken() != other.hasNextPageToken()) return false;
		if (hasNextPageToken()) {
			if (!getNextPageToken()
					.equals(other.getNextPageToken())) return false;
		}
		if (hasGlobalVersion() != other.hasGlobalVersion()) return false;
		if (hasGlobalVersion()) {
			if (getGlobalVersion()
					!= other.getGlobalVersion()) return false;
		}
		if (!getUnknownFields().equals(other.getUnknownFields())) return false;
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (memoizedHashCode != 0) {
			return memoizedHashCode;
		}
		int hash = 41;
		hash = (19 * hash) + getDescriptor().hashCode();
		if (getKeyVersionsCount() > 0) {
			hash = (37 * hash) + KEY_VERSIONS_FIELD_NUMBER;
			hash = (53 * hash) + getKeyVersionsList().hashCode();
		}
		if (hasNextPageToken()) {
			hash = (37 * hash) + NEXT_PAGE_TOKEN_FIELD_NUMBER;
			hash = (53 * hash) + getNextPageToken().hashCode();
		}
		if (hasGlobalVersion()) {
			hash = (37 * hash) + GLOBAL_VERSION_FIELD_NUMBER;
			hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
					getGlobalVersion());
		}
		hash = (29 * hash) + getUnknownFields().hashCode();
		memoizedHashCode = hash;
		return hash;
	}

	public static org.vss.ListKeyVersionsResponse parseFrom(
			java.nio.ByteBuffer data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.ListKeyVersionsResponse parseFrom(
			java.nio.ByteBuffer data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.ListKeyVersionsResponse parseFrom(
			com.google.protobuf.ByteString data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.ListKeyVersionsResponse parseFrom(
			com.google.protobuf.ByteString data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.ListKeyVersionsResponse parseFrom(byte[] data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.ListKeyVersionsResponse parseFrom(
			byte[] data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.ListKeyVersionsResponse parseFrom(java.io.InputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input);
	}

	public static org.vss.ListKeyVersionsResponse parseFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input, extensionRegistry);
	}

	public static org.vss.ListKeyVersionsResponse parseDelimitedFrom(java.io.InputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseDelimitedWithIOException(PARSER, input);
	}

	public static org.vss.ListKeyVersionsResponse parseDelimitedFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
	}

	public static org.vss.ListKeyVersionsResponse parseFrom(
			com.google.protobuf.CodedInputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input);
	}

	public static org.vss.ListKeyVersionsResponse parseFrom(
			com.google.protobuf.CodedInputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input, extensionRegistry);
	}

	@java.lang.Override
	public Builder newBuilderForType() {
		return newBuilder();
	}

	public static Builder newBuilder() {
		return DEFAULT_INSTANCE.toBuilder();
	}

	public static Builder newBuilder(org.vss.ListKeyVersionsResponse prototype) {
		return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
	}

	@java.lang.Override
	public Builder toBuilder() {
		return this == DEFAULT_INSTANCE
				? new Builder() : new Builder().mergeFrom(this);
	}

	@java.lang.Override
	protected Builder newBuilderForType(
			com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
		Builder builder = new Builder(parent);
		return builder;
	}

	/**
	 * <pre>
	 * Server response for `ListKeyVersions` API.
	 * </pre>
	 * <p>
	 * Protobuf type {@code vss.ListKeyVersionsResponse}
	 */
	public static final class Builder extends
			com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
			// @@protoc_insertion_point(builder_implements:vss.ListKeyVersionsResponse)
			org.vss.ListKeyVersionsResponseOrBuilder {
		public static final com.google.protobuf.Descriptors.Descriptor
		getDescriptor() {
			return org.vss.Vss.internal_static_vss_ListKeyVersionsResponse_descriptor;
		}

		@java.lang.Override
		protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
		internalGetFieldAccessorTable() {
			return org.vss.Vss.internal_static_vss_ListKeyVersionsResponse_fieldAccessorTable
					.ensureFieldAccessorsInitialized(
							org.vss.ListKeyVersionsResponse.class, org.vss.ListKeyVersionsResponse.Builder.class);
		}

		// Construct using org.vss.ListKeyVersionsResponse.newBuilder()
		private Builder() {

		}

		private Builder(
				com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
			super(parent);

		}

		@java.lang.Override
		public Builder clear() {
			super.clear();
			bitField0_ = 0;
			if (keyVersionsBuilder_ == null) {
				keyVersions_ = java.util.Collections.emptyList();
			} else {
				keyVersions_ = null;
				keyVersionsBuilder_.clear();
			}
			bitField0_ = (bitField0_ & ~0x00000001);
			nextPageToken_ = "";
			globalVersion_ = 0L;
			return this;
		}

		@java.lang.Override
		public com.google.protobuf.Descriptors.Descriptor
		getDescriptorForType() {
			return org.vss.Vss.internal_static_vss_ListKeyVersionsResponse_descriptor;
		}

		@java.lang.Override
		public org.vss.ListKeyVersionsResponse getDefaultInstanceForType() {
			return org.vss.ListKeyVersionsResponse.getDefaultInstance();
		}

		@java.lang.Override
		public org.vss.ListKeyVersionsResponse build() {
			org.vss.ListKeyVersionsResponse result = buildPartial();
			if (!result.isInitialized()) {
				throw newUninitializedMessageException(result);
			}
			return result;
		}

		@java.lang.Override
		public org.vss.ListKeyVersionsResponse buildPartial() {
			org.vss.ListKeyVersionsResponse result = new org.vss.ListKeyVersionsResponse(this);
			buildPartialRepeatedFields(result);
			if (bitField0_ != 0) {
				buildPartial0(result);
			}
			onBuilt();
			return result;
		}

		private void buildPartialRepeatedFields(org.vss.ListKeyVersionsResponse result) {
			if (keyVersionsBuilder_ == null) {
				if (((bitField0_ & 0x00000001) != 0)) {
					keyVersions_ = java.util.Collections.unmodifiableList(keyVersions_);
					bitField0_ = (bitField0_ & ~0x00000001);
				}
				result.keyVersions_ = keyVersions_;
			} else {
				result.keyVersions_ = keyVersionsBuilder_.build();
			}
		}

		private void buildPartial0(org.vss.ListKeyVersionsResponse result) {
			int from_bitField0_ = bitField0_;
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000002) != 0)) {
				result.nextPageToken_ = nextPageToken_;
				to_bitField0_ |= 0x00000001;
			}
			if (((from_bitField0_ & 0x00000004) != 0)) {
				result.globalVersion_ = globalVersion_;
				to_bitField0_ |= 0x00000002;
			}
			result.bitField0_ |= to_bitField0_;
		}

		@java.lang.Override
		public Builder clone() {
			return super.clone();
		}

		@java.lang.Override
		public Builder setField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				java.lang.Object value) {
			return super.setField(field, value);
		}

		@java.lang.Override
		public Builder clearField(
				com.google.protobuf.Descriptors.FieldDescriptor field) {
			return super.clearField(field);
		}

		@java.lang.Override
		public Builder clearOneof(
				com.google.protobuf.Descriptors.OneofDescriptor oneof) {
			return super.clearOneof(oneof);
		}

		@java.lang.Override
		public Builder setRepeatedField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				int index, java.lang.Object value) {
			return super.setRepeatedField(field, index, value);
		}

		@java.lang.Override
		public Builder addRepeatedField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				java.lang.Object value) {
			return super.addRepeatedField(field, value);
		}

		@java.lang.Override
		public Builder mergeFrom(com.google.protobuf.Message other) {
			if (other instanceof org.vss.ListKeyVersionsResponse) {
				return mergeFrom((org.vss.ListKeyVersionsResponse) other);
			} else {
				super.mergeFrom(other);
				return this;
			}
		}

		public Builder mergeFrom(org.vss.ListKeyVersionsResponse other) {
			if (other == org.vss.ListKeyVersionsResponse.getDefaultInstance()) return this;
			if (keyVersionsBuilder_ == null) {
				if (!other.keyVersions_.isEmpty()) {
					if (keyVersions_.isEmpty()) {
						keyVersions_ = other.keyVersions_;
						bitField0_ = (bitField0_ & ~0x00000001);
					} else {
						ensureKeyVersionsIsMutable();
						keyVersions_.addAll(other.keyVersions_);
					}
					onChanged();
				}
			} else {
				if (!other.keyVersions_.isEmpty()) {
					if (keyVersionsBuilder_.isEmpty()) {
						keyVersionsBuilder_.dispose();
						keyVersionsBuilder_ = null;
						keyVersions_ = other.keyVersions_;
						bitField0_ = (bitField0_ & ~0x00000001);
						keyVersionsBuilder_ =
								com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
										getKeyVersionsFieldBuilder() : null;
					} else {
						keyVersionsBuilder_.addAllMessages(other.keyVersions_);
					}
				}
			}
			if (other.hasNextPageToken()) {
				nextPageToken_ = other.nextPageToken_;
				bitField0_ |= 0x00000002;
				onChanged();
			}
			if (other.hasGlobalVersion()) {
				setGlobalVersion(other.getGlobalVersion());
			}
			this.mergeUnknownFields(other.getUnknownFields());
			onChanged();
			return this;
		}

		@java.lang.Override
		public final boolean isInitialized() {
			return true;
		}

		@java.lang.Override
		public Builder mergeFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			if (extensionRegistry == null) {
				throw new java.lang.NullPointerException();
			}
			try {
				boolean done = false;
				while (!done) {
					int tag = input.readTag();
					switch (tag) {
						case 0:
							done = true;
							break;
						case 10: {
							org.vss.KeyValue m =
									input.readMessage(
											org.vss.KeyValue.parser(),
											extensionRegistry);
							if (keyVersionsBuilder_ == null) {
								ensureKeyVersionsIsMutable();
								keyVersions_.add(m);
							} else {
								keyVersionsBuilder_.addMessage(m);
							}
							break;
						} // case 10
						case 18: {
							nextPageToken_ = input.readStringRequireUtf8();
							bitField0_ |= 0x00000002;
							break;
						} // case 18
						case 24: {
							globalVersion_ = input.readInt64();
							bitField0_ |= 0x00000004;
							break;
						} // case 24
						default: {
							if (!super.parseUnknownField(input, extensionRegistry, tag)) {
								done = true; // was an endgroup tag
							}
							break;
						} // default:
					} // switch (tag)
				} // while (!done)
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.unwrapIOException();
			} finally {
				onChanged();
			} // finally
			return this;
		}

		private int bitField0_;

		private java.util.List<org.vss.KeyValue> keyVersions_ =
				java.util.Collections.emptyList();

		private void ensureKeyVersionsIsMutable() {
			if (!((bitField0_ & 0x00000001) != 0)) {
				keyVersions_ = new java.util.ArrayList<org.vss.KeyValue>(keyVersions_);
				bitField0_ |= 0x00000001;
			}
		}

		private com.google.protobuf.RepeatedFieldBuilderV3<
				org.vss.KeyValue, org.vss.KeyValue.Builder, org.vss.KeyValueOrBuilder> keyVersionsBuilder_;

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public java.util.List<org.vss.KeyValue> getKeyVersionsList() {
			if (keyVersionsBuilder_ == null) {
				return java.util.Collections.unmodifiableList(keyVersions_);
			} else {
				return keyVersionsBuilder_.getMessageList();
			}
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public int getKeyVersionsCount() {
			if (keyVersionsBuilder_ == null) {
				return keyVersions_.size();
			} else {
				return keyVersionsBuilder_.getCount();
			}
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public org.vss.KeyValue getKeyVersions(int index) {
			if (keyVersionsBuilder_ == null) {
				return keyVersions_.get(index);
			} else {
				return keyVersionsBuilder_.getMessage(index);
			}
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public Builder setKeyVersions(
				int index, org.vss.KeyValue value) {
			if (keyVersionsBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureKeyVersionsIsMutable();
				keyVersions_.set(index, value);
				onChanged();
			} else {
				keyVersionsBuilder_.setMessage(index, value);
			}
			return this;
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public Builder setKeyVersions(
				int index, org.vss.KeyValue.Builder builderForValue) {
			if (keyVersionsBuilder_ == null) {
				ensureKeyVersionsIsMutable();
				keyVersions_.set(index, builderForValue.build());
				onChanged();
			} else {
				keyVersionsBuilder_.setMessage(index, builderForValue.build());
			}
			return this;
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public Builder addKeyVersions(org.vss.KeyValue value) {
			if (keyVersionsBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureKeyVersionsIsMutable();
				keyVersions_.add(value);
				onChanged();
			} else {
				keyVersionsBuilder_.addMessage(value);
			}
			return this;
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public Builder addKeyVersions(
				int index, org.vss.KeyValue value) {
			if (keyVersionsBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureKeyVersionsIsMutable();
				keyVersions_.add(index, value);
				onChanged();
			} else {
				keyVersionsBuilder_.addMessage(index, value);
			}
			return this;
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public Builder addKeyVersions(
				org.vss.KeyValue.Builder builderForValue) {
			if (keyVersionsBuilder_ == null) {
				ensureKeyVersionsIsMutable();
				keyVersions_.add(builderForValue.build());
				onChanged();
			} else {
				keyVersionsBuilder_.addMessage(builderForValue.build());
			}
			return this;
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public Builder addKeyVersions(
				int index, org.vss.KeyValue.Builder builderForValue) {
			if (keyVersionsBuilder_ == null) {
				ensureKeyVersionsIsMutable();
				keyVersions_.add(index, builderForValue.build());
				onChanged();
			} else {
				keyVersionsBuilder_.addMessage(index, builderForValue.build());
			}
			return this;
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public Builder addAllKeyVersions(
				java.lang.Iterable<? extends org.vss.KeyValue> values) {
			if (keyVersionsBuilder_ == null) {
				ensureKeyVersionsIsMutable();
				com.google.protobuf.AbstractMessageLite.Builder.addAll(
						values, keyVersions_);
				onChanged();
			} else {
				keyVersionsBuilder_.addAllMessages(values);
			}
			return this;
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public Builder clearKeyVersions() {
			if (keyVersionsBuilder_ == null) {
				keyVersions_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000001);
				onChanged();
			} else {
				keyVersionsBuilder_.clear();
			}
			return this;
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public Builder removeKeyVersions(int index) {
			if (keyVersionsBuilder_ == null) {
				ensureKeyVersionsIsMutable();
				keyVersions_.remove(index);
				onChanged();
			} else {
				keyVersionsBuilder_.remove(index);
			}
			return this;
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public org.vss.KeyValue.Builder getKeyVersionsBuilder(
				int index) {
			return getKeyVersionsFieldBuilder().getBuilder(index);
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public org.vss.KeyValueOrBuilder getKeyVersionsOrBuilder(
				int index) {
			if (keyVersionsBuilder_ == null) {
				return keyVersions_.get(index);
			} else {
				return keyVersionsBuilder_.getMessageOrBuilder(index);
			}
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public java.util.List<? extends org.vss.KeyValueOrBuilder>
		getKeyVersionsOrBuilderList() {
			if (keyVersionsBuilder_ != null) {
				return keyVersionsBuilder_.getMessageOrBuilderList();
			} else {
				return java.util.Collections.unmodifiableList(keyVersions_);
			}
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public org.vss.KeyValue.Builder addKeyVersionsBuilder() {
			return getKeyVersionsFieldBuilder().addBuilder(
					org.vss.KeyValue.getDefaultInstance());
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public org.vss.KeyValue.Builder addKeyVersionsBuilder(
				int index) {
			return getKeyVersionsFieldBuilder().addBuilder(
					index, org.vss.KeyValue.getDefaultInstance());
		}

		/**
		 * <pre>
		 * Fetched keys and versions.
		 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue key_versions = 1;</code>
		 */
		public java.util.List<org.vss.KeyValue.Builder>
		getKeyVersionsBuilderList() {
			return getKeyVersionsFieldBuilder().getBuilderList();
		}

		private com.google.protobuf.RepeatedFieldBuilderV3<
				org.vss.KeyValue, org.vss.KeyValue.Builder, org.vss.KeyValueOrBuilder>
		getKeyVersionsFieldBuilder() {
			if (keyVersionsBuilder_ == null) {
				keyVersionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
						org.vss.KeyValue, org.vss.KeyValue.Builder, org.vss.KeyValueOrBuilder>(
						keyVersions_,
						((bitField0_ & 0x00000001) != 0),
						getParentForChildren(),
						isClean());
				keyVersions_ = null;
			}
			return keyVersionsBuilder_;
		}

		private java.lang.Object nextPageToken_ = "";

		/**
		 * <pre>
		 * `next_page_token` is a pagination token, used to retrieve the next page of results.
		 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
		 * this value as the `page_token` in the next request.
		 *
		 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
		 * there is no more data to be retrieved.
		 *
		 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
		 * result set. The only way to know when you have reached the end of the result set is when
		 * `next_page_token` is empty.
		 *
		 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
		 * paginated response.
		 * </pre>
		 *
		 * <code>optional string next_page_token = 2;</code>
		 *
		 * @return Whether the nextPageToken field is set.
		 */
		public boolean hasNextPageToken() {
			return ((bitField0_ & 0x00000002) != 0);
		}

		/**
		 * <pre>
		 * `next_page_token` is a pagination token, used to retrieve the next page of results.
		 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
		 * this value as the `page_token` in the next request.
		 *
		 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
		 * there is no more data to be retrieved.
		 *
		 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
		 * result set. The only way to know when you have reached the end of the result set is when
		 * `next_page_token` is empty.
		 *
		 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
		 * paginated response.
		 * </pre>
		 *
		 * <code>optional string next_page_token = 2;</code>
		 *
		 * @return The nextPageToken.
		 */
		public java.lang.String getNextPageToken() {
			java.lang.Object ref = nextPageToken_;
			if (!(ref instanceof java.lang.String)) {
				com.google.protobuf.ByteString bs =
						(com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				nextPageToken_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <pre>
		 * `next_page_token` is a pagination token, used to retrieve the next page of results.
		 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
		 * this value as the `page_token` in the next request.
		 *
		 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
		 * there is no more data to be retrieved.
		 *
		 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
		 * result set. The only way to know when you have reached the end of the result set is when
		 * `next_page_token` is empty.
		 *
		 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
		 * paginated response.
		 * </pre>
		 *
		 * <code>optional string next_page_token = 2;</code>
		 *
		 * @return The bytes for nextPageToken.
		 */
		public com.google.protobuf.ByteString
		getNextPageTokenBytes() {
			java.lang.Object ref = nextPageToken_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b =
						com.google.protobuf.ByteString.copyFromUtf8(
								(java.lang.String) ref);
				nextPageToken_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <pre>
		 * `next_page_token` is a pagination token, used to retrieve the next page of results.
		 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
		 * this value as the `page_token` in the next request.
		 *
		 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
		 * there is no more data to be retrieved.
		 *
		 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
		 * result set. The only way to know when you have reached the end of the result set is when
		 * `next_page_token` is empty.
		 *
		 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
		 * paginated response.
		 * </pre>
		 *
		 * <code>optional string next_page_token = 2;</code>
		 *
		 * @param value The nextPageToken to set.
		 * @return This builder for chaining.
		 */
		public Builder setNextPageToken(
				java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			nextPageToken_ = value;
			bitField0_ |= 0x00000002;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `next_page_token` is a pagination token, used to retrieve the next page of results.
		 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
		 * this value as the `page_token` in the next request.
		 *
		 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
		 * there is no more data to be retrieved.
		 *
		 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
		 * result set. The only way to know when you have reached the end of the result set is when
		 * `next_page_token` is empty.
		 *
		 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
		 * paginated response.
		 * </pre>
		 *
		 * <code>optional string next_page_token = 2;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearNextPageToken() {
			nextPageToken_ = getDefaultInstance().getNextPageToken();
			bitField0_ = (bitField0_ & ~0x00000002);
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `next_page_token` is a pagination token, used to retrieve the next page of results.
		 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
		 * this value as the `page_token` in the next request.
		 *
		 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
		 * there is no more data to be retrieved.
		 *
		 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
		 * result set. The only way to know when you have reached the end of the result set is when
		 * `next_page_token` is empty.
		 *
		 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
		 * paginated response.
		 * </pre>
		 *
		 * <code>optional string next_page_token = 2;</code>
		 *
		 * @param value The bytes for nextPageToken to set.
		 * @return This builder for chaining.
		 */
		public Builder setNextPageTokenBytes(
				com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			checkByteStringIsUtf8(value);
			nextPageToken_ = value;
			bitField0_ |= 0x00000002;
			onChanged();
			return this;
		}

		private long globalVersion_;

		/**
		 * <pre>
		 * `global_version` is a sequence-number/version of the whole store.
		 *
		 * `global_version` is only returned in response for the first page of the `ListKeyVersionsResponse`
		 * and is guaranteed to be read before reading any key-versions.
		 *
		 * In case of refreshing the complete key-version view on the client-side, correct usage for
		 * the returned `global_version` is as following:
		 *   1. Read `global_version` from the first page of paginated response and save it as local variable.
		 *   2. Update all the `key_versions` on client-side from all the pages of paginated response.
		 *   3. Update `global_version` on client_side from the local variable saved in step-1.
		 * This ensures that on client-side, all current `key_versions` were stored at `global_version` or later.
		 * This guarantee is helpful for ensuring the versioning correctness if using the `global_version`
		 * in `PutObject` API and can help avoid the race conditions related to it.
		 * </pre>
		 *
		 * <code>optional int64 global_version = 3;</code>
		 *
		 * @return Whether the globalVersion field is set.
		 */
		@java.lang.Override
		public boolean hasGlobalVersion() {
			return ((bitField0_ & 0x00000004) != 0);
		}

		/**
		 * <pre>
		 * `global_version` is a sequence-number/version of the whole store.
		 *
		 * `global_version` is only returned in response for the first page of the `ListKeyVersionsResponse`
		 * and is guaranteed to be read before reading any key-versions.
		 *
		 * In case of refreshing the complete key-version view on the client-side, correct usage for
		 * the returned `global_version` is as following:
		 *   1. Read `global_version` from the first page of paginated response and save it as local variable.
		 *   2. Update all the `key_versions` on client-side from all the pages of paginated response.
		 *   3. Update `global_version` on client_side from the local variable saved in step-1.
		 * This ensures that on client-side, all current `key_versions` were stored at `global_version` or later.
		 * This guarantee is helpful for ensuring the versioning correctness if using the `global_version`
		 * in `PutObject` API and can help avoid the race conditions related to it.
		 * </pre>
		 *
		 * <code>optional int64 global_version = 3;</code>
		 *
		 * @return The globalVersion.
		 */
		@java.lang.Override
		public long getGlobalVersion() {
			return globalVersion_;
		}

		/**
		 * <pre>
		 * `global_version` is a sequence-number/version of the whole store.
		 *
		 * `global_version` is only returned in response for the first page of the `ListKeyVersionsResponse`
		 * and is guaranteed to be read before reading any key-versions.
		 *
		 * In case of refreshing the complete key-version view on the client-side, correct usage for
		 * the returned `global_version` is as following:
		 *   1. Read `global_version` from the first page of paginated response and save it as local variable.
		 *   2. Update all the `key_versions` on client-side from all the pages of paginated response.
		 *   3. Update `global_version` on client_side from the local variable saved in step-1.
		 * This ensures that on client-side, all current `key_versions` were stored at `global_version` or later.
		 * This guarantee is helpful for ensuring the versioning correctness if using the `global_version`
		 * in `PutObject` API and can help avoid the race conditions related to it.
		 * </pre>
		 *
		 * <code>optional int64 global_version = 3;</code>
		 *
		 * @param value The globalVersion to set.
		 * @return This builder for chaining.
		 */
		public Builder setGlobalVersion(long value) {

			globalVersion_ = value;
			bitField0_ |= 0x00000004;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `global_version` is a sequence-number/version of the whole store.
		 *
		 * `global_version` is only returned in response for the first page of the `ListKeyVersionsResponse`
		 * and is guaranteed to be read before reading any key-versions.
		 *
		 * In case of refreshing the complete key-version view on the client-side, correct usage for
		 * the returned `global_version` is as following:
		 *   1. Read `global_version` from the first page of paginated response and save it as local variable.
		 *   2. Update all the `key_versions` on client-side from all the pages of paginated response.
		 *   3. Update `global_version` on client_side from the local variable saved in step-1.
		 * This ensures that on client-side, all current `key_versions` were stored at `global_version` or later.
		 * This guarantee is helpful for ensuring the versioning correctness if using the `global_version`
		 * in `PutObject` API and can help avoid the race conditions related to it.
		 * </pre>
		 *
		 * <code>optional int64 global_version = 3;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearGlobalVersion() {
			bitField0_ = (bitField0_ & ~0x00000004);
			globalVersion_ = 0L;
			onChanged();
			return this;
		}

		@java.lang.Override
		public final Builder setUnknownFields(
				final com.google.protobuf.UnknownFieldSet unknownFields) {
			return super.setUnknownFields(unknownFields);
		}

		@java.lang.Override
		public final Builder mergeUnknownFields(
				final com.google.protobuf.UnknownFieldSet unknownFields) {
			return super.mergeUnknownFields(unknownFields);
		}


		// @@protoc_insertion_point(builder_scope:vss.ListKeyVersionsResponse)
	}

	// @@protoc_insertion_point(class_scope:vss.ListKeyVersionsResponse)
	private static final org.vss.ListKeyVersionsResponse DEFAULT_INSTANCE;

	static {
		DEFAULT_INSTANCE = new org.vss.ListKeyVersionsResponse();
	}

	public static org.vss.ListKeyVersionsResponse getDefaultInstance() {
		return DEFAULT_INSTANCE;
	}

	private static final com.google.protobuf.Parser<ListKeyVersionsResponse>
			PARSER = new com.google.protobuf.AbstractParser<ListKeyVersionsResponse>() {
		@java.lang.Override
		public ListKeyVersionsResponse parsePartialFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			Builder builder = newBuilder();
			try {
				builder.mergeFrom(input, extensionRegistry);
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.setUnfinishedMessage(builder.buildPartial());
			} catch (com.google.protobuf.UninitializedMessageException e) {
				throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
			} catch (java.io.IOException e) {
				throw new com.google.protobuf.InvalidProtocolBufferException(e)
						.setUnfinishedMessage(builder.buildPartial());
			}
			return builder.buildPartial();
		}
	};

	public static com.google.protobuf.Parser<ListKeyVersionsResponse> parser() {
		return PARSER;
	}

	@java.lang.Override
	public com.google.protobuf.Parser<ListKeyVersionsResponse> getParserForType() {
		return PARSER;
	}

	@java.lang.Override
	public org.vss.ListKeyVersionsResponse getDefaultInstanceForType() {
		return DEFAULT_INSTANCE;
	}

}

