// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vss.proto

// Protobuf Java Version: 3.25.5
package org.vss;

public interface GetObjectRequestOrBuilder extends
		// @@protoc_insertion_point(interface_extends:vss.GetObjectRequest)
		com.google.protobuf.MessageOrBuilder {

	/**
	 * <pre>
	 * `store_id` is a keyspace identifier.
	 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
	 * All APIs operate within a single `store_id`.
	 * It is up to clients to use single or multiple stores for their use-case.
	 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
	 * Authorization and billing can also be performed at the `store_id` level.
	 * </pre>
	 *
	 * <code>string store_id = 1;</code>
	 *
	 * @return The storeId.
	 */
	java.lang.String getStoreId();

	/**
	 * <pre>
	 * `store_id` is a keyspace identifier.
	 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
	 * All APIs operate within a single `store_id`.
	 * It is up to clients to use single or multiple stores for their use-case.
	 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
	 * Authorization and billing can also be performed at the `store_id` level.
	 * </pre>
	 *
	 * <code>string store_id = 1;</code>
	 *
	 * @return The bytes for storeId.
	 */
	com.google.protobuf.ByteString
	getStoreIdBytes();

	/**
	 * <pre>
	 * The key of the value to be fetched.
	 *
	 * If the specified `key` does not exist, returns `ErrorCode.NO_SUCH_KEY_EXCEPTION` in the
	 * the `ErrorResponse`.
	 *
	 * Consistency Guarantee:
	 * Get(read) operations against a `key` are consistent reads and will reflect all previous writes,
	 * since Put/Write provides read-after-write and read-after-update consistency guarantees.
	 *
	 * Read Isolation:
	 * Get/Read operations against a `key` are ensured to have read-committed isolation.
	 * Ref: https://en.wikipedia.org/wiki/Isolation_(database_systems)#Read_committed
	 * </pre>
	 *
	 * <code>string key = 2;</code>
	 *
	 * @return The key.
	 */
	java.lang.String getKey();

	/**
	 * <pre>
	 * The key of the value to be fetched.
	 *
	 * If the specified `key` does not exist, returns `ErrorCode.NO_SUCH_KEY_EXCEPTION` in the
	 * the `ErrorResponse`.
	 *
	 * Consistency Guarantee:
	 * Get(read) operations against a `key` are consistent reads and will reflect all previous writes,
	 * since Put/Write provides read-after-write and read-after-update consistency guarantees.
	 *
	 * Read Isolation:
	 * Get/Read operations against a `key` are ensured to have read-committed isolation.
	 * Ref: https://en.wikipedia.org/wiki/Isolation_(database_systems)#Read_committed
	 * </pre>
	 *
	 * <code>string key = 2;</code>
	 *
	 * @return The bytes for key.
	 */
	com.google.protobuf.ByteString
	getKeyBytes();
}
