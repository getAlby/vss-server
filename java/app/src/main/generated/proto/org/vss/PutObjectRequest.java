// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vss.proto

// Protobuf Java Version: 3.25.5
package org.vss;

/**
 * <pre>
 * Request payload to be used for `PutObject` API call to server.
 * </pre>
 * <p>
 * Protobuf type {@code vss.PutObjectRequest}
 */
public final class PutObjectRequest extends
		com.google.protobuf.GeneratedMessageV3 implements
		// @@protoc_insertion_point(message_implements:vss.PutObjectRequest)
		PutObjectRequestOrBuilder {
	private static final long serialVersionUID = 0L;

	// Use PutObjectRequest.newBuilder() to construct.
	private PutObjectRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
		super(builder);
	}

	private PutObjectRequest() {
		storeId_ = "";
		transactionItems_ = java.util.Collections.emptyList();
		deleteItems_ = java.util.Collections.emptyList();
	}

	@java.lang.Override
	@SuppressWarnings({"unused"})
	protected java.lang.Object newInstance(
			UnusedPrivateParameter unused) {
		return new PutObjectRequest();
	}

	public static final com.google.protobuf.Descriptors.Descriptor
	getDescriptor() {
		return org.vss.Vss.internal_static_vss_PutObjectRequest_descriptor;
	}

	@java.lang.Override
	protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
	internalGetFieldAccessorTable() {
		return org.vss.Vss.internal_static_vss_PutObjectRequest_fieldAccessorTable
				.ensureFieldAccessorsInitialized(
						org.vss.PutObjectRequest.class, org.vss.PutObjectRequest.Builder.class);
	}

	private int bitField0_;
	public static final int STORE_ID_FIELD_NUMBER = 1;
	@SuppressWarnings("serial")
	private volatile java.lang.Object storeId_ = "";

	/**
	 * <pre>
	 * `store_id` is a keyspace identifier.
	 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
	 * All APIs operate within a single `store_id`.
	 * It is up to clients to use single or multiple stores for their use-case.
	 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
	 * Authorization and billing can also be performed at the `store_id` level.
	 * </pre>
	 *
	 * <code>string store_id = 1;</code>
	 *
	 * @return The storeId.
	 */
	@java.lang.Override
	public java.lang.String getStoreId() {
		java.lang.Object ref = storeId_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs =
					(com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			storeId_ = s;
			return s;
		}
	}

	/**
	 * <pre>
	 * `store_id` is a keyspace identifier.
	 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
	 * All APIs operate within a single `store_id`.
	 * It is up to clients to use single or multiple stores for their use-case.
	 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
	 * Authorization and billing can also be performed at the `store_id` level.
	 * </pre>
	 *
	 * <code>string store_id = 1;</code>
	 *
	 * @return The bytes for storeId.
	 */
	@java.lang.Override
	public com.google.protobuf.ByteString
	getStoreIdBytes() {
		java.lang.Object ref = storeId_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b =
					com.google.protobuf.ByteString.copyFromUtf8(
							(java.lang.String) ref);
			storeId_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	public static final int GLOBAL_VERSION_FIELD_NUMBER = 2;
	private long globalVersion_ = 0L;

	/**
	 * <pre>
	 * `global_version` is a sequence-number/version of the whole store. This can be used for versioning
	 * and ensures that multiple updates in case of multiple devices can only be done linearly, even
	 * if those updates did not directly conflict with each other based on keys/`transaction_items`.
	 *
	 * If present, the write will only succeed if the current server-side `global_version` against
	 * the `store_id` is same as in the request.
	 * Clients are expected to store (client-side) the global version against `store_id`.
	 * The request must contain their client-side value of `global_version` if global versioning and
	 * conflict detection is desired.
	 *
	 * For the first write of the store, global version should be '0'. If the write succeeds, clients
	 * must increment their global version (client-side) by 1.
	 * The server increments `global_version` (server-side) for every successful write, hence this
	 * client-side increment is required to ensure matching versions. This updated global version
	 * should be used in subsequent `PutObjectRequest`s for the store.
	 *
	 * Requests with a conflicting version will fail with `CONFLICT_EXCEPTION` as ErrorCode.
	 * </pre>
	 *
	 * <code>optional int64 global_version = 2;</code>
	 *
	 * @return Whether the globalVersion field is set.
	 */
	@java.lang.Override
	public boolean hasGlobalVersion() {
		return ((bitField0_ & 0x00000001) != 0);
	}

	/**
	 * <pre>
	 * `global_version` is a sequence-number/version of the whole store. This can be used for versioning
	 * and ensures that multiple updates in case of multiple devices can only be done linearly, even
	 * if those updates did not directly conflict with each other based on keys/`transaction_items`.
	 *
	 * If present, the write will only succeed if the current server-side `global_version` against
	 * the `store_id` is same as in the request.
	 * Clients are expected to store (client-side) the global version against `store_id`.
	 * The request must contain their client-side value of `global_version` if global versioning and
	 * conflict detection is desired.
	 *
	 * For the first write of the store, global version should be '0'. If the write succeeds, clients
	 * must increment their global version (client-side) by 1.
	 * The server increments `global_version` (server-side) for every successful write, hence this
	 * client-side increment is required to ensure matching versions. This updated global version
	 * should be used in subsequent `PutObjectRequest`s for the store.
	 *
	 * Requests with a conflicting version will fail with `CONFLICT_EXCEPTION` as ErrorCode.
	 * </pre>
	 *
	 * <code>optional int64 global_version = 2;</code>
	 *
	 * @return The globalVersion.
	 */
	@java.lang.Override
	public long getGlobalVersion() {
		return globalVersion_;
	}

	public static final int TRANSACTION_ITEMS_FIELD_NUMBER = 3;
	@SuppressWarnings("serial")
	private java.util.List<org.vss.KeyValue> transactionItems_;

	/**
	 * <pre>
	 * Items to be written as a result of this `PutObjectRequest`.
	 *
	 * In an item, each `key` is supplied with its corresponding `value` and `version`.
	 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
	 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
	 *
	 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
	 * a database-transaction in an all-or-nothing fashion.
	 * All Items in a single `PutObjectRequest` must have distinct keys.
	 *
	 * Key-level versioning (Conditional Write):
	 *   Clients are expected to store a `version` against every `key`.
	 *   The write will succeed if the current DB version against the `key` is the same as in the request.
	 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
	 *   for that key-value.
	 *
	 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
	 *   must increment their corresponding key versions (client-side) by 1.
	 *   The server increments key versions (server-side) for every successful write, hence this
	 *   client-side increment is required to ensure matching versions. These updated key versions should
	 *   be used in subsequent `PutObjectRequest`s for the keys.
	 *
	 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
	 *   for conditional writes.
	 *
	 * Skipping key-level versioning (Non-conditional Write):
	 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
	 *   This will perform a non-conditional write query, after which the `version` against the `key`
	 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
	 *   a non-conditional write or a conditional write with `version` set to `1`.
	 *
	 * Considerations for transactions:
	 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
	 * them only if required by the client application to ensure logic/code correctness.
	 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
	 * When a write of multiple unrelated items is desired, it is recommended to use separate
	 * `PutObjectRequest`s.
	 *
	 * Consistency guarantee:
	 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
	 * read-after-update consistency guarantees.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
	 */
	@java.lang.Override
	public java.util.List<org.vss.KeyValue> getTransactionItemsList() {
		return transactionItems_;
	}

	/**
	 * <pre>
	 * Items to be written as a result of this `PutObjectRequest`.
	 *
	 * In an item, each `key` is supplied with its corresponding `value` and `version`.
	 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
	 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
	 *
	 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
	 * a database-transaction in an all-or-nothing fashion.
	 * All Items in a single `PutObjectRequest` must have distinct keys.
	 *
	 * Key-level versioning (Conditional Write):
	 *   Clients are expected to store a `version` against every `key`.
	 *   The write will succeed if the current DB version against the `key` is the same as in the request.
	 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
	 *   for that key-value.
	 *
	 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
	 *   must increment their corresponding key versions (client-side) by 1.
	 *   The server increments key versions (server-side) for every successful write, hence this
	 *   client-side increment is required to ensure matching versions. These updated key versions should
	 *   be used in subsequent `PutObjectRequest`s for the keys.
	 *
	 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
	 *   for conditional writes.
	 *
	 * Skipping key-level versioning (Non-conditional Write):
	 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
	 *   This will perform a non-conditional write query, after which the `version` against the `key`
	 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
	 *   a non-conditional write or a conditional write with `version` set to `1`.
	 *
	 * Considerations for transactions:
	 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
	 * them only if required by the client application to ensure logic/code correctness.
	 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
	 * When a write of multiple unrelated items is desired, it is recommended to use separate
	 * `PutObjectRequest`s.
	 *
	 * Consistency guarantee:
	 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
	 * read-after-update consistency guarantees.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
	 */
	@java.lang.Override
	public java.util.List<? extends org.vss.KeyValueOrBuilder>
	getTransactionItemsOrBuilderList() {
		return transactionItems_;
	}

	/**
	 * <pre>
	 * Items to be written as a result of this `PutObjectRequest`.
	 *
	 * In an item, each `key` is supplied with its corresponding `value` and `version`.
	 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
	 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
	 *
	 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
	 * a database-transaction in an all-or-nothing fashion.
	 * All Items in a single `PutObjectRequest` must have distinct keys.
	 *
	 * Key-level versioning (Conditional Write):
	 *   Clients are expected to store a `version` against every `key`.
	 *   The write will succeed if the current DB version against the `key` is the same as in the request.
	 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
	 *   for that key-value.
	 *
	 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
	 *   must increment their corresponding key versions (client-side) by 1.
	 *   The server increments key versions (server-side) for every successful write, hence this
	 *   client-side increment is required to ensure matching versions. These updated key versions should
	 *   be used in subsequent `PutObjectRequest`s for the keys.
	 *
	 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
	 *   for conditional writes.
	 *
	 * Skipping key-level versioning (Non-conditional Write):
	 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
	 *   This will perform a non-conditional write query, after which the `version` against the `key`
	 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
	 *   a non-conditional write or a conditional write with `version` set to `1`.
	 *
	 * Considerations for transactions:
	 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
	 * them only if required by the client application to ensure logic/code correctness.
	 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
	 * When a write of multiple unrelated items is desired, it is recommended to use separate
	 * `PutObjectRequest`s.
	 *
	 * Consistency guarantee:
	 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
	 * read-after-update consistency guarantees.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
	 */
	@java.lang.Override
	public int getTransactionItemsCount() {
		return transactionItems_.size();
	}

	/**
	 * <pre>
	 * Items to be written as a result of this `PutObjectRequest`.
	 *
	 * In an item, each `key` is supplied with its corresponding `value` and `version`.
	 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
	 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
	 *
	 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
	 * a database-transaction in an all-or-nothing fashion.
	 * All Items in a single `PutObjectRequest` must have distinct keys.
	 *
	 * Key-level versioning (Conditional Write):
	 *   Clients are expected to store a `version` against every `key`.
	 *   The write will succeed if the current DB version against the `key` is the same as in the request.
	 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
	 *   for that key-value.
	 *
	 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
	 *   must increment their corresponding key versions (client-side) by 1.
	 *   The server increments key versions (server-side) for every successful write, hence this
	 *   client-side increment is required to ensure matching versions. These updated key versions should
	 *   be used in subsequent `PutObjectRequest`s for the keys.
	 *
	 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
	 *   for conditional writes.
	 *
	 * Skipping key-level versioning (Non-conditional Write):
	 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
	 *   This will perform a non-conditional write query, after which the `version` against the `key`
	 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
	 *   a non-conditional write or a conditional write with `version` set to `1`.
	 *
	 * Considerations for transactions:
	 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
	 * them only if required by the client application to ensure logic/code correctness.
	 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
	 * When a write of multiple unrelated items is desired, it is recommended to use separate
	 * `PutObjectRequest`s.
	 *
	 * Consistency guarantee:
	 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
	 * read-after-update consistency guarantees.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
	 */
	@java.lang.Override
	public org.vss.KeyValue getTransactionItems(int index) {
		return transactionItems_.get(index);
	}

	/**
	 * <pre>
	 * Items to be written as a result of this `PutObjectRequest`.
	 *
	 * In an item, each `key` is supplied with its corresponding `value` and `version`.
	 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
	 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
	 *
	 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
	 * a database-transaction in an all-or-nothing fashion.
	 * All Items in a single `PutObjectRequest` must have distinct keys.
	 *
	 * Key-level versioning (Conditional Write):
	 *   Clients are expected to store a `version` against every `key`.
	 *   The write will succeed if the current DB version against the `key` is the same as in the request.
	 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
	 *   for that key-value.
	 *
	 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
	 *   must increment their corresponding key versions (client-side) by 1.
	 *   The server increments key versions (server-side) for every successful write, hence this
	 *   client-side increment is required to ensure matching versions. These updated key versions should
	 *   be used in subsequent `PutObjectRequest`s for the keys.
	 *
	 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
	 *   for conditional writes.
	 *
	 * Skipping key-level versioning (Non-conditional Write):
	 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
	 *   This will perform a non-conditional write query, after which the `version` against the `key`
	 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
	 *   a non-conditional write or a conditional write with `version` set to `1`.
	 *
	 * Considerations for transactions:
	 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
	 * them only if required by the client application to ensure logic/code correctness.
	 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
	 * When a write of multiple unrelated items is desired, it is recommended to use separate
	 * `PutObjectRequest`s.
	 *
	 * Consistency guarantee:
	 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
	 * read-after-update consistency guarantees.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
	 */
	@java.lang.Override
	public org.vss.KeyValueOrBuilder getTransactionItemsOrBuilder(
			int index) {
		return transactionItems_.get(index);
	}

	public static final int DELETE_ITEMS_FIELD_NUMBER = 4;
	@SuppressWarnings("serial")
	private java.util.List<org.vss.KeyValue> deleteItems_;

	/**
	 * <pre>
	 * Items to be deleted as a result of this `PutObjectRequest`.
	 *
	 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
	 *
	 * Key-Level Versioning (Conditional Delete):
	 *   The `version` is used to perform a version check before deleting the item.
	 *   The delete will only succeed if the current database version against the `key` is the same as
	 *   the `version` specified in the request.
	 *
	 * Skipping key-level versioning (Non-conditional Delete):
	 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
	 *   This will perform a non-conditional delete query.
	 *
	 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
	 *   * The requested item does not exist.
	 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
	 *     with the one in the database.
	 *
	 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
	 * database transaction in an all-or-nothing fashion.
	 *
	 * All items within a single `PutObjectRequest` must have distinct keys.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue delete_items = 4;</code>
	 */
	@java.lang.Override
	public java.util.List<org.vss.KeyValue> getDeleteItemsList() {
		return deleteItems_;
	}

	/**
	 * <pre>
	 * Items to be deleted as a result of this `PutObjectRequest`.
	 *
	 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
	 *
	 * Key-Level Versioning (Conditional Delete):
	 *   The `version` is used to perform a version check before deleting the item.
	 *   The delete will only succeed if the current database version against the `key` is the same as
	 *   the `version` specified in the request.
	 *
	 * Skipping key-level versioning (Non-conditional Delete):
	 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
	 *   This will perform a non-conditional delete query.
	 *
	 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
	 *   * The requested item does not exist.
	 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
	 *     with the one in the database.
	 *
	 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
	 * database transaction in an all-or-nothing fashion.
	 *
	 * All items within a single `PutObjectRequest` must have distinct keys.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue delete_items = 4;</code>
	 */
	@java.lang.Override
	public java.util.List<? extends org.vss.KeyValueOrBuilder>
	getDeleteItemsOrBuilderList() {
		return deleteItems_;
	}

	/**
	 * <pre>
	 * Items to be deleted as a result of this `PutObjectRequest`.
	 *
	 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
	 *
	 * Key-Level Versioning (Conditional Delete):
	 *   The `version` is used to perform a version check before deleting the item.
	 *   The delete will only succeed if the current database version against the `key` is the same as
	 *   the `version` specified in the request.
	 *
	 * Skipping key-level versioning (Non-conditional Delete):
	 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
	 *   This will perform a non-conditional delete query.
	 *
	 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
	 *   * The requested item does not exist.
	 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
	 *     with the one in the database.
	 *
	 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
	 * database transaction in an all-or-nothing fashion.
	 *
	 * All items within a single `PutObjectRequest` must have distinct keys.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue delete_items = 4;</code>
	 */
	@java.lang.Override
	public int getDeleteItemsCount() {
		return deleteItems_.size();
	}

	/**
	 * <pre>
	 * Items to be deleted as a result of this `PutObjectRequest`.
	 *
	 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
	 *
	 * Key-Level Versioning (Conditional Delete):
	 *   The `version` is used to perform a version check before deleting the item.
	 *   The delete will only succeed if the current database version against the `key` is the same as
	 *   the `version` specified in the request.
	 *
	 * Skipping key-level versioning (Non-conditional Delete):
	 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
	 *   This will perform a non-conditional delete query.
	 *
	 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
	 *   * The requested item does not exist.
	 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
	 *     with the one in the database.
	 *
	 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
	 * database transaction in an all-or-nothing fashion.
	 *
	 * All items within a single `PutObjectRequest` must have distinct keys.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue delete_items = 4;</code>
	 */
	@java.lang.Override
	public org.vss.KeyValue getDeleteItems(int index) {
		return deleteItems_.get(index);
	}

	/**
	 * <pre>
	 * Items to be deleted as a result of this `PutObjectRequest`.
	 *
	 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
	 *
	 * Key-Level Versioning (Conditional Delete):
	 *   The `version` is used to perform a version check before deleting the item.
	 *   The delete will only succeed if the current database version against the `key` is the same as
	 *   the `version` specified in the request.
	 *
	 * Skipping key-level versioning (Non-conditional Delete):
	 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
	 *   This will perform a non-conditional delete query.
	 *
	 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
	 *   * The requested item does not exist.
	 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
	 *     with the one in the database.
	 *
	 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
	 * database transaction in an all-or-nothing fashion.
	 *
	 * All items within a single `PutObjectRequest` must have distinct keys.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue delete_items = 4;</code>
	 */
	@java.lang.Override
	public org.vss.KeyValueOrBuilder getDeleteItemsOrBuilder(
			int index) {
		return deleteItems_.get(index);
	}

	private byte memoizedIsInitialized = -1;

	@java.lang.Override
	public final boolean isInitialized() {
		byte isInitialized = memoizedIsInitialized;
		if (isInitialized == 1) return true;
		if (isInitialized == 0) return false;

		memoizedIsInitialized = 1;
		return true;
	}

	@java.lang.Override
	public void writeTo(com.google.protobuf.CodedOutputStream output)
			throws java.io.IOException {
		if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(storeId_)) {
			com.google.protobuf.GeneratedMessageV3.writeString(output, 1, storeId_);
		}
		if (((bitField0_ & 0x00000001) != 0)) {
			output.writeInt64(2, globalVersion_);
		}
		for (int i = 0; i < transactionItems_.size(); i++) {
			output.writeMessage(3, transactionItems_.get(i));
		}
		for (int i = 0; i < deleteItems_.size(); i++) {
			output.writeMessage(4, deleteItems_.get(i));
		}
		getUnknownFields().writeTo(output);
	}

	@java.lang.Override
	public int getSerializedSize() {
		int size = memoizedSize;
		if (size != -1) return size;

		size = 0;
		if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(storeId_)) {
			size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, storeId_);
		}
		if (((bitField0_ & 0x00000001) != 0)) {
			size += com.google.protobuf.CodedOutputStream
					.computeInt64Size(2, globalVersion_);
		}
		for (int i = 0; i < transactionItems_.size(); i++) {
			size += com.google.protobuf.CodedOutputStream
					.computeMessageSize(3, transactionItems_.get(i));
		}
		for (int i = 0; i < deleteItems_.size(); i++) {
			size += com.google.protobuf.CodedOutputStream
					.computeMessageSize(4, deleteItems_.get(i));
		}
		size += getUnknownFields().getSerializedSize();
		memoizedSize = size;
		return size;
	}

	@java.lang.Override
	public boolean equals(final java.lang.Object obj) {
		if (obj == this) {
			return true;
		}
		if (!(obj instanceof org.vss.PutObjectRequest)) {
			return super.equals(obj);
		}
		org.vss.PutObjectRequest other = (org.vss.PutObjectRequest) obj;

		if (!getStoreId()
				.equals(other.getStoreId())) return false;
		if (hasGlobalVersion() != other.hasGlobalVersion()) return false;
		if (hasGlobalVersion()) {
			if (getGlobalVersion()
					!= other.getGlobalVersion()) return false;
		}
		if (!getTransactionItemsList()
				.equals(other.getTransactionItemsList())) return false;
		if (!getDeleteItemsList()
				.equals(other.getDeleteItemsList())) return false;
		if (!getUnknownFields().equals(other.getUnknownFields())) return false;
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (memoizedHashCode != 0) {
			return memoizedHashCode;
		}
		int hash = 41;
		hash = (19 * hash) + getDescriptor().hashCode();
		hash = (37 * hash) + STORE_ID_FIELD_NUMBER;
		hash = (53 * hash) + getStoreId().hashCode();
		if (hasGlobalVersion()) {
			hash = (37 * hash) + GLOBAL_VERSION_FIELD_NUMBER;
			hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
					getGlobalVersion());
		}
		if (getTransactionItemsCount() > 0) {
			hash = (37 * hash) + TRANSACTION_ITEMS_FIELD_NUMBER;
			hash = (53 * hash) + getTransactionItemsList().hashCode();
		}
		if (getDeleteItemsCount() > 0) {
			hash = (37 * hash) + DELETE_ITEMS_FIELD_NUMBER;
			hash = (53 * hash) + getDeleteItemsList().hashCode();
		}
		hash = (29 * hash) + getUnknownFields().hashCode();
		memoizedHashCode = hash;
		return hash;
	}

	public static org.vss.PutObjectRequest parseFrom(
			java.nio.ByteBuffer data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.PutObjectRequest parseFrom(
			java.nio.ByteBuffer data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.PutObjectRequest parseFrom(
			com.google.protobuf.ByteString data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.PutObjectRequest parseFrom(
			com.google.protobuf.ByteString data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.PutObjectRequest parseFrom(byte[] data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.PutObjectRequest parseFrom(
			byte[] data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.PutObjectRequest parseFrom(java.io.InputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input);
	}

	public static org.vss.PutObjectRequest parseFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input, extensionRegistry);
	}

	public static org.vss.PutObjectRequest parseDelimitedFrom(java.io.InputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseDelimitedWithIOException(PARSER, input);
	}

	public static org.vss.PutObjectRequest parseDelimitedFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
	}

	public static org.vss.PutObjectRequest parseFrom(
			com.google.protobuf.CodedInputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input);
	}

	public static org.vss.PutObjectRequest parseFrom(
			com.google.protobuf.CodedInputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input, extensionRegistry);
	}

	@java.lang.Override
	public Builder newBuilderForType() {
		return newBuilder();
	}

	public static Builder newBuilder() {
		return DEFAULT_INSTANCE.toBuilder();
	}

	public static Builder newBuilder(org.vss.PutObjectRequest prototype) {
		return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
	}

	@java.lang.Override
	public Builder toBuilder() {
		return this == DEFAULT_INSTANCE
				? new Builder() : new Builder().mergeFrom(this);
	}

	@java.lang.Override
	protected Builder newBuilderForType(
			com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
		Builder builder = new Builder(parent);
		return builder;
	}

	/**
	 * <pre>
	 * Request payload to be used for `PutObject` API call to server.
	 * </pre>
	 * <p>
	 * Protobuf type {@code vss.PutObjectRequest}
	 */
	public static final class Builder extends
			com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
			// @@protoc_insertion_point(builder_implements:vss.PutObjectRequest)
			org.vss.PutObjectRequestOrBuilder {
		public static final com.google.protobuf.Descriptors.Descriptor
		getDescriptor() {
			return org.vss.Vss.internal_static_vss_PutObjectRequest_descriptor;
		}

		@java.lang.Override
		protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
		internalGetFieldAccessorTable() {
			return org.vss.Vss.internal_static_vss_PutObjectRequest_fieldAccessorTable
					.ensureFieldAccessorsInitialized(
							org.vss.PutObjectRequest.class, org.vss.PutObjectRequest.Builder.class);
		}

		// Construct using org.vss.PutObjectRequest.newBuilder()
		private Builder() {

		}

		private Builder(
				com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
			super(parent);

		}

		@java.lang.Override
		public Builder clear() {
			super.clear();
			bitField0_ = 0;
			storeId_ = "";
			globalVersion_ = 0L;
			if (transactionItemsBuilder_ == null) {
				transactionItems_ = java.util.Collections.emptyList();
			} else {
				transactionItems_ = null;
				transactionItemsBuilder_.clear();
			}
			bitField0_ = (bitField0_ & ~0x00000004);
			if (deleteItemsBuilder_ == null) {
				deleteItems_ = java.util.Collections.emptyList();
			} else {
				deleteItems_ = null;
				deleteItemsBuilder_.clear();
			}
			bitField0_ = (bitField0_ & ~0x00000008);
			return this;
		}

		@java.lang.Override
		public com.google.protobuf.Descriptors.Descriptor
		getDescriptorForType() {
			return org.vss.Vss.internal_static_vss_PutObjectRequest_descriptor;
		}

		@java.lang.Override
		public org.vss.PutObjectRequest getDefaultInstanceForType() {
			return org.vss.PutObjectRequest.getDefaultInstance();
		}

		@java.lang.Override
		public org.vss.PutObjectRequest build() {
			org.vss.PutObjectRequest result = buildPartial();
			if (!result.isInitialized()) {
				throw newUninitializedMessageException(result);
			}
			return result;
		}

		@java.lang.Override
		public org.vss.PutObjectRequest buildPartial() {
			org.vss.PutObjectRequest result = new org.vss.PutObjectRequest(this);
			buildPartialRepeatedFields(result);
			if (bitField0_ != 0) {
				buildPartial0(result);
			}
			onBuilt();
			return result;
		}

		private void buildPartialRepeatedFields(org.vss.PutObjectRequest result) {
			if (transactionItemsBuilder_ == null) {
				if (((bitField0_ & 0x00000004) != 0)) {
					transactionItems_ = java.util.Collections.unmodifiableList(transactionItems_);
					bitField0_ = (bitField0_ & ~0x00000004);
				}
				result.transactionItems_ = transactionItems_;
			} else {
				result.transactionItems_ = transactionItemsBuilder_.build();
			}
			if (deleteItemsBuilder_ == null) {
				if (((bitField0_ & 0x00000008) != 0)) {
					deleteItems_ = java.util.Collections.unmodifiableList(deleteItems_);
					bitField0_ = (bitField0_ & ~0x00000008);
				}
				result.deleteItems_ = deleteItems_;
			} else {
				result.deleteItems_ = deleteItemsBuilder_.build();
			}
		}

		private void buildPartial0(org.vss.PutObjectRequest result) {
			int from_bitField0_ = bitField0_;
			if (((from_bitField0_ & 0x00000001) != 0)) {
				result.storeId_ = storeId_;
			}
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000002) != 0)) {
				result.globalVersion_ = globalVersion_;
				to_bitField0_ |= 0x00000001;
			}
			result.bitField0_ |= to_bitField0_;
		}

		@java.lang.Override
		public Builder clone() {
			return super.clone();
		}

		@java.lang.Override
		public Builder setField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				java.lang.Object value) {
			return super.setField(field, value);
		}

		@java.lang.Override
		public Builder clearField(
				com.google.protobuf.Descriptors.FieldDescriptor field) {
			return super.clearField(field);
		}

		@java.lang.Override
		public Builder clearOneof(
				com.google.protobuf.Descriptors.OneofDescriptor oneof) {
			return super.clearOneof(oneof);
		}

		@java.lang.Override
		public Builder setRepeatedField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				int index, java.lang.Object value) {
			return super.setRepeatedField(field, index, value);
		}

		@java.lang.Override
		public Builder addRepeatedField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				java.lang.Object value) {
			return super.addRepeatedField(field, value);
		}

		@java.lang.Override
		public Builder mergeFrom(com.google.protobuf.Message other) {
			if (other instanceof org.vss.PutObjectRequest) {
				return mergeFrom((org.vss.PutObjectRequest) other);
			} else {
				super.mergeFrom(other);
				return this;
			}
		}

		public Builder mergeFrom(org.vss.PutObjectRequest other) {
			if (other == org.vss.PutObjectRequest.getDefaultInstance()) return this;
			if (!other.getStoreId().isEmpty()) {
				storeId_ = other.storeId_;
				bitField0_ |= 0x00000001;
				onChanged();
			}
			if (other.hasGlobalVersion()) {
				setGlobalVersion(other.getGlobalVersion());
			}
			if (transactionItemsBuilder_ == null) {
				if (!other.transactionItems_.isEmpty()) {
					if (transactionItems_.isEmpty()) {
						transactionItems_ = other.transactionItems_;
						bitField0_ = (bitField0_ & ~0x00000004);
					} else {
						ensureTransactionItemsIsMutable();
						transactionItems_.addAll(other.transactionItems_);
					}
					onChanged();
				}
			} else {
				if (!other.transactionItems_.isEmpty()) {
					if (transactionItemsBuilder_.isEmpty()) {
						transactionItemsBuilder_.dispose();
						transactionItemsBuilder_ = null;
						transactionItems_ = other.transactionItems_;
						bitField0_ = (bitField0_ & ~0x00000004);
						transactionItemsBuilder_ =
								com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
										getTransactionItemsFieldBuilder() : null;
					} else {
						transactionItemsBuilder_.addAllMessages(other.transactionItems_);
					}
				}
			}
			if (deleteItemsBuilder_ == null) {
				if (!other.deleteItems_.isEmpty()) {
					if (deleteItems_.isEmpty()) {
						deleteItems_ = other.deleteItems_;
						bitField0_ = (bitField0_ & ~0x00000008);
					} else {
						ensureDeleteItemsIsMutable();
						deleteItems_.addAll(other.deleteItems_);
					}
					onChanged();
				}
			} else {
				if (!other.deleteItems_.isEmpty()) {
					if (deleteItemsBuilder_.isEmpty()) {
						deleteItemsBuilder_.dispose();
						deleteItemsBuilder_ = null;
						deleteItems_ = other.deleteItems_;
						bitField0_ = (bitField0_ & ~0x00000008);
						deleteItemsBuilder_ =
								com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
										getDeleteItemsFieldBuilder() : null;
					} else {
						deleteItemsBuilder_.addAllMessages(other.deleteItems_);
					}
				}
			}
			this.mergeUnknownFields(other.getUnknownFields());
			onChanged();
			return this;
		}

		@java.lang.Override
		public final boolean isInitialized() {
			return true;
		}

		@java.lang.Override
		public Builder mergeFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			if (extensionRegistry == null) {
				throw new java.lang.NullPointerException();
			}
			try {
				boolean done = false;
				while (!done) {
					int tag = input.readTag();
					switch (tag) {
						case 0:
							done = true;
							break;
						case 10: {
							storeId_ = input.readStringRequireUtf8();
							bitField0_ |= 0x00000001;
							break;
						} // case 10
						case 16: {
							globalVersion_ = input.readInt64();
							bitField0_ |= 0x00000002;
							break;
						} // case 16
						case 26: {
							org.vss.KeyValue m =
									input.readMessage(
											org.vss.KeyValue.parser(),
											extensionRegistry);
							if (transactionItemsBuilder_ == null) {
								ensureTransactionItemsIsMutable();
								transactionItems_.add(m);
							} else {
								transactionItemsBuilder_.addMessage(m);
							}
							break;
						} // case 26
						case 34: {
							org.vss.KeyValue m =
									input.readMessage(
											org.vss.KeyValue.parser(),
											extensionRegistry);
							if (deleteItemsBuilder_ == null) {
								ensureDeleteItemsIsMutable();
								deleteItems_.add(m);
							} else {
								deleteItemsBuilder_.addMessage(m);
							}
							break;
						} // case 34
						default: {
							if (!super.parseUnknownField(input, extensionRegistry, tag)) {
								done = true; // was an endgroup tag
							}
							break;
						} // default:
					} // switch (tag)
				} // while (!done)
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.unwrapIOException();
			} finally {
				onChanged();
			} // finally
			return this;
		}

		private int bitField0_;

		private java.lang.Object storeId_ = "";

		/**
		 * <pre>
		 * `store_id` is a keyspace identifier.
		 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
		 * All APIs operate within a single `store_id`.
		 * It is up to clients to use single or multiple stores for their use-case.
		 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
		 * Authorization and billing can also be performed at the `store_id` level.
		 * </pre>
		 *
		 * <code>string store_id = 1;</code>
		 *
		 * @return The storeId.
		 */
		public java.lang.String getStoreId() {
			java.lang.Object ref = storeId_;
			if (!(ref instanceof java.lang.String)) {
				com.google.protobuf.ByteString bs =
						(com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				storeId_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <pre>
		 * `store_id` is a keyspace identifier.
		 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
		 * All APIs operate within a single `store_id`.
		 * It is up to clients to use single or multiple stores for their use-case.
		 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
		 * Authorization and billing can also be performed at the `store_id` level.
		 * </pre>
		 *
		 * <code>string store_id = 1;</code>
		 *
		 * @return The bytes for storeId.
		 */
		public com.google.protobuf.ByteString
		getStoreIdBytes() {
			java.lang.Object ref = storeId_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b =
						com.google.protobuf.ByteString.copyFromUtf8(
								(java.lang.String) ref);
				storeId_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <pre>
		 * `store_id` is a keyspace identifier.
		 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
		 * All APIs operate within a single `store_id`.
		 * It is up to clients to use single or multiple stores for their use-case.
		 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
		 * Authorization and billing can also be performed at the `store_id` level.
		 * </pre>
		 *
		 * <code>string store_id = 1;</code>
		 *
		 * @param value The storeId to set.
		 * @return This builder for chaining.
		 */
		public Builder setStoreId(
				java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			storeId_ = value;
			bitField0_ |= 0x00000001;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `store_id` is a keyspace identifier.
		 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
		 * All APIs operate within a single `store_id`.
		 * It is up to clients to use single or multiple stores for their use-case.
		 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
		 * Authorization and billing can also be performed at the `store_id` level.
		 * </pre>
		 *
		 * <code>string store_id = 1;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearStoreId() {
			storeId_ = getDefaultInstance().getStoreId();
			bitField0_ = (bitField0_ & ~0x00000001);
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `store_id` is a keyspace identifier.
		 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
		 * All APIs operate within a single `store_id`.
		 * It is up to clients to use single or multiple stores for their use-case.
		 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
		 * Authorization and billing can also be performed at the `store_id` level.
		 * </pre>
		 *
		 * <code>string store_id = 1;</code>
		 *
		 * @param value The bytes for storeId to set.
		 * @return This builder for chaining.
		 */
		public Builder setStoreIdBytes(
				com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			checkByteStringIsUtf8(value);
			storeId_ = value;
			bitField0_ |= 0x00000001;
			onChanged();
			return this;
		}

		private long globalVersion_;

		/**
		 * <pre>
		 * `global_version` is a sequence-number/version of the whole store. This can be used for versioning
		 * and ensures that multiple updates in case of multiple devices can only be done linearly, even
		 * if those updates did not directly conflict with each other based on keys/`transaction_items`.
		 *
		 * If present, the write will only succeed if the current server-side `global_version` against
		 * the `store_id` is same as in the request.
		 * Clients are expected to store (client-side) the global version against `store_id`.
		 * The request must contain their client-side value of `global_version` if global versioning and
		 * conflict detection is desired.
		 *
		 * For the first write of the store, global version should be '0'. If the write succeeds, clients
		 * must increment their global version (client-side) by 1.
		 * The server increments `global_version` (server-side) for every successful write, hence this
		 * client-side increment is required to ensure matching versions. This updated global version
		 * should be used in subsequent `PutObjectRequest`s for the store.
		 *
		 * Requests with a conflicting version will fail with `CONFLICT_EXCEPTION` as ErrorCode.
		 * </pre>
		 *
		 * <code>optional int64 global_version = 2;</code>
		 *
		 * @return Whether the globalVersion field is set.
		 */
		@java.lang.Override
		public boolean hasGlobalVersion() {
			return ((bitField0_ & 0x00000002) != 0);
		}

		/**
		 * <pre>
		 * `global_version` is a sequence-number/version of the whole store. This can be used for versioning
		 * and ensures that multiple updates in case of multiple devices can only be done linearly, even
		 * if those updates did not directly conflict with each other based on keys/`transaction_items`.
		 *
		 * If present, the write will only succeed if the current server-side `global_version` against
		 * the `store_id` is same as in the request.
		 * Clients are expected to store (client-side) the global version against `store_id`.
		 * The request must contain their client-side value of `global_version` if global versioning and
		 * conflict detection is desired.
		 *
		 * For the first write of the store, global version should be '0'. If the write succeeds, clients
		 * must increment their global version (client-side) by 1.
		 * The server increments `global_version` (server-side) for every successful write, hence this
		 * client-side increment is required to ensure matching versions. This updated global version
		 * should be used in subsequent `PutObjectRequest`s for the store.
		 *
		 * Requests with a conflicting version will fail with `CONFLICT_EXCEPTION` as ErrorCode.
		 * </pre>
		 *
		 * <code>optional int64 global_version = 2;</code>
		 *
		 * @return The globalVersion.
		 */
		@java.lang.Override
		public long getGlobalVersion() {
			return globalVersion_;
		}

		/**
		 * <pre>
		 * `global_version` is a sequence-number/version of the whole store. This can be used for versioning
		 * and ensures that multiple updates in case of multiple devices can only be done linearly, even
		 * if those updates did not directly conflict with each other based on keys/`transaction_items`.
		 *
		 * If present, the write will only succeed if the current server-side `global_version` against
		 * the `store_id` is same as in the request.
		 * Clients are expected to store (client-side) the global version against `store_id`.
		 * The request must contain their client-side value of `global_version` if global versioning and
		 * conflict detection is desired.
		 *
		 * For the first write of the store, global version should be '0'. If the write succeeds, clients
		 * must increment their global version (client-side) by 1.
		 * The server increments `global_version` (server-side) for every successful write, hence this
		 * client-side increment is required to ensure matching versions. This updated global version
		 * should be used in subsequent `PutObjectRequest`s for the store.
		 *
		 * Requests with a conflicting version will fail with `CONFLICT_EXCEPTION` as ErrorCode.
		 * </pre>
		 *
		 * <code>optional int64 global_version = 2;</code>
		 *
		 * @param value The globalVersion to set.
		 * @return This builder for chaining.
		 */
		public Builder setGlobalVersion(long value) {

			globalVersion_ = value;
			bitField0_ |= 0x00000002;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `global_version` is a sequence-number/version of the whole store. This can be used for versioning
		 * and ensures that multiple updates in case of multiple devices can only be done linearly, even
		 * if those updates did not directly conflict with each other based on keys/`transaction_items`.
		 *
		 * If present, the write will only succeed if the current server-side `global_version` against
		 * the `store_id` is same as in the request.
		 * Clients are expected to store (client-side) the global version against `store_id`.
		 * The request must contain their client-side value of `global_version` if global versioning and
		 * conflict detection is desired.
		 *
		 * For the first write of the store, global version should be '0'. If the write succeeds, clients
		 * must increment their global version (client-side) by 1.
		 * The server increments `global_version` (server-side) for every successful write, hence this
		 * client-side increment is required to ensure matching versions. This updated global version
		 * should be used in subsequent `PutObjectRequest`s for the store.
		 *
		 * Requests with a conflicting version will fail with `CONFLICT_EXCEPTION` as ErrorCode.
		 * </pre>
		 *
		 * <code>optional int64 global_version = 2;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearGlobalVersion() {
			bitField0_ = (bitField0_ & ~0x00000002);
			globalVersion_ = 0L;
			onChanged();
			return this;
		}

		private java.util.List<org.vss.KeyValue> transactionItems_ =
				java.util.Collections.emptyList();

		private void ensureTransactionItemsIsMutable() {
			if (!((bitField0_ & 0x00000004) != 0)) {
				transactionItems_ = new java.util.ArrayList<org.vss.KeyValue>(transactionItems_);
				bitField0_ |= 0x00000004;
			}
		}

		private com.google.protobuf.RepeatedFieldBuilderV3<
				org.vss.KeyValue, org.vss.KeyValue.Builder, org.vss.KeyValueOrBuilder> transactionItemsBuilder_;

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public java.util.List<org.vss.KeyValue> getTransactionItemsList() {
			if (transactionItemsBuilder_ == null) {
				return java.util.Collections.unmodifiableList(transactionItems_);
			} else {
				return transactionItemsBuilder_.getMessageList();
			}
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public int getTransactionItemsCount() {
			if (transactionItemsBuilder_ == null) {
				return transactionItems_.size();
			} else {
				return transactionItemsBuilder_.getCount();
			}
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public org.vss.KeyValue getTransactionItems(int index) {
			if (transactionItemsBuilder_ == null) {
				return transactionItems_.get(index);
			} else {
				return transactionItemsBuilder_.getMessage(index);
			}
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public Builder setTransactionItems(
				int index, org.vss.KeyValue value) {
			if (transactionItemsBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureTransactionItemsIsMutable();
				transactionItems_.set(index, value);
				onChanged();
			} else {
				transactionItemsBuilder_.setMessage(index, value);
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public Builder setTransactionItems(
				int index, org.vss.KeyValue.Builder builderForValue) {
			if (transactionItemsBuilder_ == null) {
				ensureTransactionItemsIsMutable();
				transactionItems_.set(index, builderForValue.build());
				onChanged();
			} else {
				transactionItemsBuilder_.setMessage(index, builderForValue.build());
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public Builder addTransactionItems(org.vss.KeyValue value) {
			if (transactionItemsBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureTransactionItemsIsMutable();
				transactionItems_.add(value);
				onChanged();
			} else {
				transactionItemsBuilder_.addMessage(value);
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public Builder addTransactionItems(
				int index, org.vss.KeyValue value) {
			if (transactionItemsBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureTransactionItemsIsMutable();
				transactionItems_.add(index, value);
				onChanged();
			} else {
				transactionItemsBuilder_.addMessage(index, value);
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public Builder addTransactionItems(
				org.vss.KeyValue.Builder builderForValue) {
			if (transactionItemsBuilder_ == null) {
				ensureTransactionItemsIsMutable();
				transactionItems_.add(builderForValue.build());
				onChanged();
			} else {
				transactionItemsBuilder_.addMessage(builderForValue.build());
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public Builder addTransactionItems(
				int index, org.vss.KeyValue.Builder builderForValue) {
			if (transactionItemsBuilder_ == null) {
				ensureTransactionItemsIsMutable();
				transactionItems_.add(index, builderForValue.build());
				onChanged();
			} else {
				transactionItemsBuilder_.addMessage(index, builderForValue.build());
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public Builder addAllTransactionItems(
				java.lang.Iterable<? extends org.vss.KeyValue> values) {
			if (transactionItemsBuilder_ == null) {
				ensureTransactionItemsIsMutable();
				com.google.protobuf.AbstractMessageLite.Builder.addAll(
						values, transactionItems_);
				onChanged();
			} else {
				transactionItemsBuilder_.addAllMessages(values);
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public Builder clearTransactionItems() {
			if (transactionItemsBuilder_ == null) {
				transactionItems_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000004);
				onChanged();
			} else {
				transactionItemsBuilder_.clear();
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public Builder removeTransactionItems(int index) {
			if (transactionItemsBuilder_ == null) {
				ensureTransactionItemsIsMutable();
				transactionItems_.remove(index);
				onChanged();
			} else {
				transactionItemsBuilder_.remove(index);
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public org.vss.KeyValue.Builder getTransactionItemsBuilder(
				int index) {
			return getTransactionItemsFieldBuilder().getBuilder(index);
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public org.vss.KeyValueOrBuilder getTransactionItemsOrBuilder(
				int index) {
			if (transactionItemsBuilder_ == null) {
				return transactionItems_.get(index);
			} else {
				return transactionItemsBuilder_.getMessageOrBuilder(index);
			}
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public java.util.List<? extends org.vss.KeyValueOrBuilder>
		getTransactionItemsOrBuilderList() {
			if (transactionItemsBuilder_ != null) {
				return transactionItemsBuilder_.getMessageOrBuilderList();
			} else {
				return java.util.Collections.unmodifiableList(transactionItems_);
			}
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public org.vss.KeyValue.Builder addTransactionItemsBuilder() {
			return getTransactionItemsFieldBuilder().addBuilder(
					org.vss.KeyValue.getDefaultInstance());
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public org.vss.KeyValue.Builder addTransactionItemsBuilder(
				int index) {
			return getTransactionItemsFieldBuilder().addBuilder(
					index, org.vss.KeyValue.getDefaultInstance());
		}

		/**
		 * <pre>
		 * Items to be written as a result of this `PutObjectRequest`.
		 *
		 * In an item, each `key` is supplied with its corresponding `value` and `version`.
		 * Clients can choose to encrypt the keys client-side in order to obfuscate their usage patterns.
		 * If the write is successful, the previous `value` corresponding to the `key` will be overwritten.
		 *
		 * Multiple items in `transaction_items` and `delete_items` of a single `PutObjectRequest` are written in
		 * a database-transaction in an all-or-nothing fashion.
		 * All Items in a single `PutObjectRequest` must have distinct keys.
		 *
		 * Key-level versioning (Conditional Write):
		 *   Clients are expected to store a `version` against every `key`.
		 *   The write will succeed if the current DB version against the `key` is the same as in the request.
		 *   When initiating a `PutObjectRequest`, the request should contain their client-side `version`
		 *   for that key-value.
		 *
		 *   For the first write of any `key`, the `version` should be '0'. If the write succeeds, the client
		 *   must increment their corresponding key versions (client-side) by 1.
		 *   The server increments key versions (server-side) for every successful write, hence this
		 *   client-side increment is required to ensure matching versions. These updated key versions should
		 *   be used in subsequent `PutObjectRequest`s for the keys.
		 *
		 *   Requests with a conflicting/mismatched version will fail with `CONFLICT_EXCEPTION` as ErrorCode
		 *   for conditional writes.
		 *
		 * Skipping key-level versioning (Non-conditional Write):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional write query, after which the `version` against the `key`
		 *   is reset to '1'. Hence, the next `PutObjectRequest` for the `key` can be either
		 *   a non-conditional write or a conditional write with `version` set to `1`.
		 *
		 * Considerations for transactions:
		 * Transaction writes of multiple items have a performance overhead, hence it is recommended to use
		 * them only if required by the client application to ensure logic/code correctness.
		 * That is, `transaction_items` are not a substitute for batch-write of multiple unrelated items.
		 * When a write of multiple unrelated items is desired, it is recommended to use separate
		 * `PutObjectRequest`s.
		 *
		 * Consistency guarantee:
		 * All `PutObjectRequest`s are strongly consistent i.e. they provide read-after-write and
		 * read-after-update consistency guarantees.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue transaction_items = 3;</code>
		 */
		public java.util.List<org.vss.KeyValue.Builder>
		getTransactionItemsBuilderList() {
			return getTransactionItemsFieldBuilder().getBuilderList();
		}

		private com.google.protobuf.RepeatedFieldBuilderV3<
				org.vss.KeyValue, org.vss.KeyValue.Builder, org.vss.KeyValueOrBuilder>
		getTransactionItemsFieldBuilder() {
			if (transactionItemsBuilder_ == null) {
				transactionItemsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
						org.vss.KeyValue, org.vss.KeyValue.Builder, org.vss.KeyValueOrBuilder>(
						transactionItems_,
						((bitField0_ & 0x00000004) != 0),
						getParentForChildren(),
						isClean());
				transactionItems_ = null;
			}
			return transactionItemsBuilder_;
		}

		private java.util.List<org.vss.KeyValue> deleteItems_ =
				java.util.Collections.emptyList();

		private void ensureDeleteItemsIsMutable() {
			if (!((bitField0_ & 0x00000008) != 0)) {
				deleteItems_ = new java.util.ArrayList<org.vss.KeyValue>(deleteItems_);
				bitField0_ |= 0x00000008;
			}
		}

		private com.google.protobuf.RepeatedFieldBuilderV3<
				org.vss.KeyValue, org.vss.KeyValue.Builder, org.vss.KeyValueOrBuilder> deleteItemsBuilder_;

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public java.util.List<org.vss.KeyValue> getDeleteItemsList() {
			if (deleteItemsBuilder_ == null) {
				return java.util.Collections.unmodifiableList(deleteItems_);
			} else {
				return deleteItemsBuilder_.getMessageList();
			}
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public int getDeleteItemsCount() {
			if (deleteItemsBuilder_ == null) {
				return deleteItems_.size();
			} else {
				return deleteItemsBuilder_.getCount();
			}
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public org.vss.KeyValue getDeleteItems(int index) {
			if (deleteItemsBuilder_ == null) {
				return deleteItems_.get(index);
			} else {
				return deleteItemsBuilder_.getMessage(index);
			}
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public Builder setDeleteItems(
				int index, org.vss.KeyValue value) {
			if (deleteItemsBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureDeleteItemsIsMutable();
				deleteItems_.set(index, value);
				onChanged();
			} else {
				deleteItemsBuilder_.setMessage(index, value);
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public Builder setDeleteItems(
				int index, org.vss.KeyValue.Builder builderForValue) {
			if (deleteItemsBuilder_ == null) {
				ensureDeleteItemsIsMutable();
				deleteItems_.set(index, builderForValue.build());
				onChanged();
			} else {
				deleteItemsBuilder_.setMessage(index, builderForValue.build());
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public Builder addDeleteItems(org.vss.KeyValue value) {
			if (deleteItemsBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureDeleteItemsIsMutable();
				deleteItems_.add(value);
				onChanged();
			} else {
				deleteItemsBuilder_.addMessage(value);
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public Builder addDeleteItems(
				int index, org.vss.KeyValue value) {
			if (deleteItemsBuilder_ == null) {
				if (value == null) {
					throw new NullPointerException();
				}
				ensureDeleteItemsIsMutable();
				deleteItems_.add(index, value);
				onChanged();
			} else {
				deleteItemsBuilder_.addMessage(index, value);
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public Builder addDeleteItems(
				org.vss.KeyValue.Builder builderForValue) {
			if (deleteItemsBuilder_ == null) {
				ensureDeleteItemsIsMutable();
				deleteItems_.add(builderForValue.build());
				onChanged();
			} else {
				deleteItemsBuilder_.addMessage(builderForValue.build());
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public Builder addDeleteItems(
				int index, org.vss.KeyValue.Builder builderForValue) {
			if (deleteItemsBuilder_ == null) {
				ensureDeleteItemsIsMutable();
				deleteItems_.add(index, builderForValue.build());
				onChanged();
			} else {
				deleteItemsBuilder_.addMessage(index, builderForValue.build());
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public Builder addAllDeleteItems(
				java.lang.Iterable<? extends org.vss.KeyValue> values) {
			if (deleteItemsBuilder_ == null) {
				ensureDeleteItemsIsMutable();
				com.google.protobuf.AbstractMessageLite.Builder.addAll(
						values, deleteItems_);
				onChanged();
			} else {
				deleteItemsBuilder_.addAllMessages(values);
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public Builder clearDeleteItems() {
			if (deleteItemsBuilder_ == null) {
				deleteItems_ = java.util.Collections.emptyList();
				bitField0_ = (bitField0_ & ~0x00000008);
				onChanged();
			} else {
				deleteItemsBuilder_.clear();
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public Builder removeDeleteItems(int index) {
			if (deleteItemsBuilder_ == null) {
				ensureDeleteItemsIsMutable();
				deleteItems_.remove(index);
				onChanged();
			} else {
				deleteItemsBuilder_.remove(index);
			}
			return this;
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public org.vss.KeyValue.Builder getDeleteItemsBuilder(
				int index) {
			return getDeleteItemsFieldBuilder().getBuilder(index);
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public org.vss.KeyValueOrBuilder getDeleteItemsOrBuilder(
				int index) {
			if (deleteItemsBuilder_ == null) {
				return deleteItems_.get(index);
			} else {
				return deleteItemsBuilder_.getMessageOrBuilder(index);
			}
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public java.util.List<? extends org.vss.KeyValueOrBuilder>
		getDeleteItemsOrBuilderList() {
			if (deleteItemsBuilder_ != null) {
				return deleteItemsBuilder_.getMessageOrBuilderList();
			} else {
				return java.util.Collections.unmodifiableList(deleteItems_);
			}
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public org.vss.KeyValue.Builder addDeleteItemsBuilder() {
			return getDeleteItemsFieldBuilder().addBuilder(
					org.vss.KeyValue.getDefaultInstance());
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public org.vss.KeyValue.Builder addDeleteItemsBuilder(
				int index) {
			return getDeleteItemsFieldBuilder().addBuilder(
					index, org.vss.KeyValue.getDefaultInstance());
		}

		/**
		 * <pre>
		 * Items to be deleted as a result of this `PutObjectRequest`.
		 *
		 * Each item in the `delete_items` field consists of a `key` and its corresponding `version`.
		 *
		 * Key-Level Versioning (Conditional Delete):
		 *   The `version` is used to perform a version check before deleting the item.
		 *   The delete will only succeed if the current database version against the `key` is the same as
		 *   the `version` specified in the request.
		 *
		 * Skipping key-level versioning (Non-conditional Delete):
		 *   If you wish to skip key-level version checks, set the `version` against the `key` to '-1'.
		 *   This will perform a non-conditional delete query.
		 *
		 * Fails with `CONFLICT_EXCEPTION` as the ErrorCode if:
		 *   * The requested item does not exist.
		 *   * The requested item does exist but there is a version-number mismatch (in conditional delete)
		 *     with the one in the database.
		 *
		 * Multiple items in the `delete_items` field, along with the `transaction_items`, are written in a
		 * database transaction in an all-or-nothing fashion.
		 *
		 * All items within a single `PutObjectRequest` must have distinct keys.
		 * </pre>
		 *
		 * <code>repeated .vss.KeyValue delete_items = 4;</code>
		 */
		public java.util.List<org.vss.KeyValue.Builder>
		getDeleteItemsBuilderList() {
			return getDeleteItemsFieldBuilder().getBuilderList();
		}

		private com.google.protobuf.RepeatedFieldBuilderV3<
				org.vss.KeyValue, org.vss.KeyValue.Builder, org.vss.KeyValueOrBuilder>
		getDeleteItemsFieldBuilder() {
			if (deleteItemsBuilder_ == null) {
				deleteItemsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
						org.vss.KeyValue, org.vss.KeyValue.Builder, org.vss.KeyValueOrBuilder>(
						deleteItems_,
						((bitField0_ & 0x00000008) != 0),
						getParentForChildren(),
						isClean());
				deleteItems_ = null;
			}
			return deleteItemsBuilder_;
		}

		@java.lang.Override
		public final Builder setUnknownFields(
				final com.google.protobuf.UnknownFieldSet unknownFields) {
			return super.setUnknownFields(unknownFields);
		}

		@java.lang.Override
		public final Builder mergeUnknownFields(
				final com.google.protobuf.UnknownFieldSet unknownFields) {
			return super.mergeUnknownFields(unknownFields);
		}


		// @@protoc_insertion_point(builder_scope:vss.PutObjectRequest)
	}

	// @@protoc_insertion_point(class_scope:vss.PutObjectRequest)
	private static final org.vss.PutObjectRequest DEFAULT_INSTANCE;

	static {
		DEFAULT_INSTANCE = new org.vss.PutObjectRequest();
	}

	public static org.vss.PutObjectRequest getDefaultInstance() {
		return DEFAULT_INSTANCE;
	}

	private static final com.google.protobuf.Parser<PutObjectRequest>
			PARSER = new com.google.protobuf.AbstractParser<PutObjectRequest>() {
		@java.lang.Override
		public PutObjectRequest parsePartialFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			Builder builder = newBuilder();
			try {
				builder.mergeFrom(input, extensionRegistry);
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.setUnfinishedMessage(builder.buildPartial());
			} catch (com.google.protobuf.UninitializedMessageException e) {
				throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
			} catch (java.io.IOException e) {
				throw new com.google.protobuf.InvalidProtocolBufferException(e)
						.setUnfinishedMessage(builder.buildPartial());
			}
			return builder.buildPartial();
		}
	};

	public static com.google.protobuf.Parser<PutObjectRequest> parser() {
		return PARSER;
	}

	@java.lang.Override
	public com.google.protobuf.Parser<PutObjectRequest> getParserForType() {
		return PARSER;
	}

	@java.lang.Override
	public org.vss.PutObjectRequest getDefaultInstanceForType() {
		return DEFAULT_INSTANCE;
	}

}

