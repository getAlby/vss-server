// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vss.proto

// Protobuf Java Version: 3.25.5
package org.vss;

/**
 * <pre>
 * Request payload to be used for `ListKeyVersions` API call to server.
 * </pre>
 * <p>
 * Protobuf type {@code vss.ListKeyVersionsRequest}
 */
public final class ListKeyVersionsRequest extends
		com.google.protobuf.GeneratedMessageV3 implements
		// @@protoc_insertion_point(message_implements:vss.ListKeyVersionsRequest)
		ListKeyVersionsRequestOrBuilder {
	private static final long serialVersionUID = 0L;

	// Use ListKeyVersionsRequest.newBuilder() to construct.
	private ListKeyVersionsRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
		super(builder);
	}

	private ListKeyVersionsRequest() {
		storeId_ = "";
		keyPrefix_ = "";
		pageToken_ = "";
	}

	@java.lang.Override
	@SuppressWarnings({"unused"})
	protected java.lang.Object newInstance(
			UnusedPrivateParameter unused) {
		return new ListKeyVersionsRequest();
	}

	public static final com.google.protobuf.Descriptors.Descriptor
	getDescriptor() {
		return org.vss.Vss.internal_static_vss_ListKeyVersionsRequest_descriptor;
	}

	@java.lang.Override
	protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
	internalGetFieldAccessorTable() {
		return org.vss.Vss.internal_static_vss_ListKeyVersionsRequest_fieldAccessorTable
				.ensureFieldAccessorsInitialized(
						org.vss.ListKeyVersionsRequest.class, org.vss.ListKeyVersionsRequest.Builder.class);
	}

	private int bitField0_;
	public static final int STORE_ID_FIELD_NUMBER = 1;
	@SuppressWarnings("serial")
	private volatile java.lang.Object storeId_ = "";

	/**
	 * <pre>
	 * `store_id` is a keyspace identifier.
	 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
	 * All APIs operate within a single `store_id`.
	 * It is up to clients to use single or multiple stores for their use-case.
	 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
	 * Authorization and billing can also be performed at the `store_id` level.
	 * </pre>
	 *
	 * <code>string store_id = 1;</code>
	 *
	 * @return The storeId.
	 */
	@java.lang.Override
	public java.lang.String getStoreId() {
		java.lang.Object ref = storeId_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs =
					(com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			storeId_ = s;
			return s;
		}
	}

	/**
	 * <pre>
	 * `store_id` is a keyspace identifier.
	 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
	 * All APIs operate within a single `store_id`.
	 * It is up to clients to use single or multiple stores for their use-case.
	 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
	 * Authorization and billing can also be performed at the `store_id` level.
	 * </pre>
	 *
	 * <code>string store_id = 1;</code>
	 *
	 * @return The bytes for storeId.
	 */
	@java.lang.Override
	public com.google.protobuf.ByteString
	getStoreIdBytes() {
		java.lang.Object ref = storeId_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b =
					com.google.protobuf.ByteString.copyFromUtf8(
							(java.lang.String) ref);
			storeId_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	public static final int KEY_PREFIX_FIELD_NUMBER = 2;
	@SuppressWarnings("serial")
	private volatile java.lang.Object keyPrefix_ = "";

	/**
	 * <pre>
	 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
	 * a way to organize key-values in a similar way to directories.
	 *
	 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
	 * the specified prefix.
	 *
	 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
	 * the response.
	 * </pre>
	 *
	 * <code>optional string key_prefix = 2;</code>
	 *
	 * @return Whether the keyPrefix field is set.
	 */
	@java.lang.Override
	public boolean hasKeyPrefix() {
		return ((bitField0_ & 0x00000001) != 0);
	}

	/**
	 * <pre>
	 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
	 * a way to organize key-values in a similar way to directories.
	 *
	 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
	 * the specified prefix.
	 *
	 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
	 * the response.
	 * </pre>
	 *
	 * <code>optional string key_prefix = 2;</code>
	 *
	 * @return The keyPrefix.
	 */
	@java.lang.Override
	public java.lang.String getKeyPrefix() {
		java.lang.Object ref = keyPrefix_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs =
					(com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			keyPrefix_ = s;
			return s;
		}
	}

	/**
	 * <pre>
	 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
	 * a way to organize key-values in a similar way to directories.
	 *
	 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
	 * the specified prefix.
	 *
	 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
	 * the response.
	 * </pre>
	 *
	 * <code>optional string key_prefix = 2;</code>
	 *
	 * @return The bytes for keyPrefix.
	 */
	@java.lang.Override
	public com.google.protobuf.ByteString
	getKeyPrefixBytes() {
		java.lang.Object ref = keyPrefix_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b =
					com.google.protobuf.ByteString.copyFromUtf8(
							(java.lang.String) ref);
			keyPrefix_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	public static final int PAGE_SIZE_FIELD_NUMBER = 3;
	private int pageSize_ = 0;

	/**
	 * <pre>
	 * `page_size` is used by clients to specify the maximum number of results that can be returned by
	 * the server.
	 * The server may further constrain the maximum number of results returned in a single page.
	 * If the `page_size` is 0 or not set, the server will decide the number of results to be returned.
	 * </pre>
	 *
	 * <code>optional int32 page_size = 3;</code>
	 *
	 * @return Whether the pageSize field is set.
	 */
	@java.lang.Override
	public boolean hasPageSize() {
		return ((bitField0_ & 0x00000002) != 0);
	}

	/**
	 * <pre>
	 * `page_size` is used by clients to specify the maximum number of results that can be returned by
	 * the server.
	 * The server may further constrain the maximum number of results returned in a single page.
	 * If the `page_size` is 0 or not set, the server will decide the number of results to be returned.
	 * </pre>
	 *
	 * <code>optional int32 page_size = 3;</code>
	 *
	 * @return The pageSize.
	 */
	@java.lang.Override
	public int getPageSize() {
		return pageSize_;
	}

	public static final int PAGE_TOKEN_FIELD_NUMBER = 4;
	@SuppressWarnings("serial")
	private volatile java.lang.Object pageToken_ = "";

	/**
	 * <pre>
	 * `page_token` is a pagination token.
	 *
	 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
	 *
	 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
	 * page's `ListKeyVersionsResponse`.
	 * </pre>
	 *
	 * <code>optional string page_token = 4;</code>
	 *
	 * @return Whether the pageToken field is set.
	 */
	@java.lang.Override
	public boolean hasPageToken() {
		return ((bitField0_ & 0x00000004) != 0);
	}

	/**
	 * <pre>
	 * `page_token` is a pagination token.
	 *
	 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
	 *
	 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
	 * page's `ListKeyVersionsResponse`.
	 * </pre>
	 *
	 * <code>optional string page_token = 4;</code>
	 *
	 * @return The pageToken.
	 */
	@java.lang.Override
	public java.lang.String getPageToken() {
		java.lang.Object ref = pageToken_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs =
					(com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			pageToken_ = s;
			return s;
		}
	}

	/**
	 * <pre>
	 * `page_token` is a pagination token.
	 *
	 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
	 *
	 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
	 * page's `ListKeyVersionsResponse`.
	 * </pre>
	 *
	 * <code>optional string page_token = 4;</code>
	 *
	 * @return The bytes for pageToken.
	 */
	@java.lang.Override
	public com.google.protobuf.ByteString
	getPageTokenBytes() {
		java.lang.Object ref = pageToken_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b =
					com.google.protobuf.ByteString.copyFromUtf8(
							(java.lang.String) ref);
			pageToken_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	private byte memoizedIsInitialized = -1;

	@java.lang.Override
	public final boolean isInitialized() {
		byte isInitialized = memoizedIsInitialized;
		if (isInitialized == 1) return true;
		if (isInitialized == 0) return false;

		memoizedIsInitialized = 1;
		return true;
	}

	@java.lang.Override
	public void writeTo(com.google.protobuf.CodedOutputStream output)
			throws java.io.IOException {
		if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(storeId_)) {
			com.google.protobuf.GeneratedMessageV3.writeString(output, 1, storeId_);
		}
		if (((bitField0_ & 0x00000001) != 0)) {
			com.google.protobuf.GeneratedMessageV3.writeString(output, 2, keyPrefix_);
		}
		if (((bitField0_ & 0x00000002) != 0)) {
			output.writeInt32(3, pageSize_);
		}
		if (((bitField0_ & 0x00000004) != 0)) {
			com.google.protobuf.GeneratedMessageV3.writeString(output, 4, pageToken_);
		}
		getUnknownFields().writeTo(output);
	}

	@java.lang.Override
	public int getSerializedSize() {
		int size = memoizedSize;
		if (size != -1) return size;

		size = 0;
		if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(storeId_)) {
			size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, storeId_);
		}
		if (((bitField0_ & 0x00000001) != 0)) {
			size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, keyPrefix_);
		}
		if (((bitField0_ & 0x00000002) != 0)) {
			size += com.google.protobuf.CodedOutputStream
					.computeInt32Size(3, pageSize_);
		}
		if (((bitField0_ & 0x00000004) != 0)) {
			size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, pageToken_);
		}
		size += getUnknownFields().getSerializedSize();
		memoizedSize = size;
		return size;
	}

	@java.lang.Override
	public boolean equals(final java.lang.Object obj) {
		if (obj == this) {
			return true;
		}
		if (!(obj instanceof org.vss.ListKeyVersionsRequest)) {
			return super.equals(obj);
		}
		org.vss.ListKeyVersionsRequest other = (org.vss.ListKeyVersionsRequest) obj;

		if (!getStoreId()
				.equals(other.getStoreId())) return false;
		if (hasKeyPrefix() != other.hasKeyPrefix()) return false;
		if (hasKeyPrefix()) {
			if (!getKeyPrefix()
					.equals(other.getKeyPrefix())) return false;
		}
		if (hasPageSize() != other.hasPageSize()) return false;
		if (hasPageSize()) {
			if (getPageSize()
					!= other.getPageSize()) return false;
		}
		if (hasPageToken() != other.hasPageToken()) return false;
		if (hasPageToken()) {
			if (!getPageToken()
					.equals(other.getPageToken())) return false;
		}
		if (!getUnknownFields().equals(other.getUnknownFields())) return false;
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (memoizedHashCode != 0) {
			return memoizedHashCode;
		}
		int hash = 41;
		hash = (19 * hash) + getDescriptor().hashCode();
		hash = (37 * hash) + STORE_ID_FIELD_NUMBER;
		hash = (53 * hash) + getStoreId().hashCode();
		if (hasKeyPrefix()) {
			hash = (37 * hash) + KEY_PREFIX_FIELD_NUMBER;
			hash = (53 * hash) + getKeyPrefix().hashCode();
		}
		if (hasPageSize()) {
			hash = (37 * hash) + PAGE_SIZE_FIELD_NUMBER;
			hash = (53 * hash) + getPageSize();
		}
		if (hasPageToken()) {
			hash = (37 * hash) + PAGE_TOKEN_FIELD_NUMBER;
			hash = (53 * hash) + getPageToken().hashCode();
		}
		hash = (29 * hash) + getUnknownFields().hashCode();
		memoizedHashCode = hash;
		return hash;
	}

	public static org.vss.ListKeyVersionsRequest parseFrom(
			java.nio.ByteBuffer data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.ListKeyVersionsRequest parseFrom(
			java.nio.ByteBuffer data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.ListKeyVersionsRequest parseFrom(
			com.google.protobuf.ByteString data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.ListKeyVersionsRequest parseFrom(
			com.google.protobuf.ByteString data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.ListKeyVersionsRequest parseFrom(byte[] data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.ListKeyVersionsRequest parseFrom(
			byte[] data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.ListKeyVersionsRequest parseFrom(java.io.InputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input);
	}

	public static org.vss.ListKeyVersionsRequest parseFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input, extensionRegistry);
	}

	public static org.vss.ListKeyVersionsRequest parseDelimitedFrom(java.io.InputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseDelimitedWithIOException(PARSER, input);
	}

	public static org.vss.ListKeyVersionsRequest parseDelimitedFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
	}

	public static org.vss.ListKeyVersionsRequest parseFrom(
			com.google.protobuf.CodedInputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input);
	}

	public static org.vss.ListKeyVersionsRequest parseFrom(
			com.google.protobuf.CodedInputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input, extensionRegistry);
	}

	@java.lang.Override
	public Builder newBuilderForType() {
		return newBuilder();
	}

	public static Builder newBuilder() {
		return DEFAULT_INSTANCE.toBuilder();
	}

	public static Builder newBuilder(org.vss.ListKeyVersionsRequest prototype) {
		return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
	}

	@java.lang.Override
	public Builder toBuilder() {
		return this == DEFAULT_INSTANCE
				? new Builder() : new Builder().mergeFrom(this);
	}

	@java.lang.Override
	protected Builder newBuilderForType(
			com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
		Builder builder = new Builder(parent);
		return builder;
	}

	/**
	 * <pre>
	 * Request payload to be used for `ListKeyVersions` API call to server.
	 * </pre>
	 * <p>
	 * Protobuf type {@code vss.ListKeyVersionsRequest}
	 */
	public static final class Builder extends
			com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
			// @@protoc_insertion_point(builder_implements:vss.ListKeyVersionsRequest)
			org.vss.ListKeyVersionsRequestOrBuilder {
		public static final com.google.protobuf.Descriptors.Descriptor
		getDescriptor() {
			return org.vss.Vss.internal_static_vss_ListKeyVersionsRequest_descriptor;
		}

		@java.lang.Override
		protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
		internalGetFieldAccessorTable() {
			return org.vss.Vss.internal_static_vss_ListKeyVersionsRequest_fieldAccessorTable
					.ensureFieldAccessorsInitialized(
							org.vss.ListKeyVersionsRequest.class, org.vss.ListKeyVersionsRequest.Builder.class);
		}

		// Construct using org.vss.ListKeyVersionsRequest.newBuilder()
		private Builder() {

		}

		private Builder(
				com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
			super(parent);

		}

		@java.lang.Override
		public Builder clear() {
			super.clear();
			bitField0_ = 0;
			storeId_ = "";
			keyPrefix_ = "";
			pageSize_ = 0;
			pageToken_ = "";
			return this;
		}

		@java.lang.Override
		public com.google.protobuf.Descriptors.Descriptor
		getDescriptorForType() {
			return org.vss.Vss.internal_static_vss_ListKeyVersionsRequest_descriptor;
		}

		@java.lang.Override
		public org.vss.ListKeyVersionsRequest getDefaultInstanceForType() {
			return org.vss.ListKeyVersionsRequest.getDefaultInstance();
		}

		@java.lang.Override
		public org.vss.ListKeyVersionsRequest build() {
			org.vss.ListKeyVersionsRequest result = buildPartial();
			if (!result.isInitialized()) {
				throw newUninitializedMessageException(result);
			}
			return result;
		}

		@java.lang.Override
		public org.vss.ListKeyVersionsRequest buildPartial() {
			org.vss.ListKeyVersionsRequest result = new org.vss.ListKeyVersionsRequest(this);
			if (bitField0_ != 0) {
				buildPartial0(result);
			}
			onBuilt();
			return result;
		}

		private void buildPartial0(org.vss.ListKeyVersionsRequest result) {
			int from_bitField0_ = bitField0_;
			if (((from_bitField0_ & 0x00000001) != 0)) {
				result.storeId_ = storeId_;
			}
			int to_bitField0_ = 0;
			if (((from_bitField0_ & 0x00000002) != 0)) {
				result.keyPrefix_ = keyPrefix_;
				to_bitField0_ |= 0x00000001;
			}
			if (((from_bitField0_ & 0x00000004) != 0)) {
				result.pageSize_ = pageSize_;
				to_bitField0_ |= 0x00000002;
			}
			if (((from_bitField0_ & 0x00000008) != 0)) {
				result.pageToken_ = pageToken_;
				to_bitField0_ |= 0x00000004;
			}
			result.bitField0_ |= to_bitField0_;
		}

		@java.lang.Override
		public Builder clone() {
			return super.clone();
		}

		@java.lang.Override
		public Builder setField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				java.lang.Object value) {
			return super.setField(field, value);
		}

		@java.lang.Override
		public Builder clearField(
				com.google.protobuf.Descriptors.FieldDescriptor field) {
			return super.clearField(field);
		}

		@java.lang.Override
		public Builder clearOneof(
				com.google.protobuf.Descriptors.OneofDescriptor oneof) {
			return super.clearOneof(oneof);
		}

		@java.lang.Override
		public Builder setRepeatedField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				int index, java.lang.Object value) {
			return super.setRepeatedField(field, index, value);
		}

		@java.lang.Override
		public Builder addRepeatedField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				java.lang.Object value) {
			return super.addRepeatedField(field, value);
		}

		@java.lang.Override
		public Builder mergeFrom(com.google.protobuf.Message other) {
			if (other instanceof org.vss.ListKeyVersionsRequest) {
				return mergeFrom((org.vss.ListKeyVersionsRequest) other);
			} else {
				super.mergeFrom(other);
				return this;
			}
		}

		public Builder mergeFrom(org.vss.ListKeyVersionsRequest other) {
			if (other == org.vss.ListKeyVersionsRequest.getDefaultInstance()) return this;
			if (!other.getStoreId().isEmpty()) {
				storeId_ = other.storeId_;
				bitField0_ |= 0x00000001;
				onChanged();
			}
			if (other.hasKeyPrefix()) {
				keyPrefix_ = other.keyPrefix_;
				bitField0_ |= 0x00000002;
				onChanged();
			}
			if (other.hasPageSize()) {
				setPageSize(other.getPageSize());
			}
			if (other.hasPageToken()) {
				pageToken_ = other.pageToken_;
				bitField0_ |= 0x00000008;
				onChanged();
			}
			this.mergeUnknownFields(other.getUnknownFields());
			onChanged();
			return this;
		}

		@java.lang.Override
		public final boolean isInitialized() {
			return true;
		}

		@java.lang.Override
		public Builder mergeFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			if (extensionRegistry == null) {
				throw new java.lang.NullPointerException();
			}
			try {
				boolean done = false;
				while (!done) {
					int tag = input.readTag();
					switch (tag) {
						case 0:
							done = true;
							break;
						case 10: {
							storeId_ = input.readStringRequireUtf8();
							bitField0_ |= 0x00000001;
							break;
						} // case 10
						case 18: {
							keyPrefix_ = input.readStringRequireUtf8();
							bitField0_ |= 0x00000002;
							break;
						} // case 18
						case 24: {
							pageSize_ = input.readInt32();
							bitField0_ |= 0x00000004;
							break;
						} // case 24
						case 34: {
							pageToken_ = input.readStringRequireUtf8();
							bitField0_ |= 0x00000008;
							break;
						} // case 34
						default: {
							if (!super.parseUnknownField(input, extensionRegistry, tag)) {
								done = true; // was an endgroup tag
							}
							break;
						} // default:
					} // switch (tag)
				} // while (!done)
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.unwrapIOException();
			} finally {
				onChanged();
			} // finally
			return this;
		}

		private int bitField0_;

		private java.lang.Object storeId_ = "";

		/**
		 * <pre>
		 * `store_id` is a keyspace identifier.
		 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
		 * All APIs operate within a single `store_id`.
		 * It is up to clients to use single or multiple stores for their use-case.
		 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
		 * Authorization and billing can also be performed at the `store_id` level.
		 * </pre>
		 *
		 * <code>string store_id = 1;</code>
		 *
		 * @return The storeId.
		 */
		public java.lang.String getStoreId() {
			java.lang.Object ref = storeId_;
			if (!(ref instanceof java.lang.String)) {
				com.google.protobuf.ByteString bs =
						(com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				storeId_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <pre>
		 * `store_id` is a keyspace identifier.
		 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
		 * All APIs operate within a single `store_id`.
		 * It is up to clients to use single or multiple stores for their use-case.
		 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
		 * Authorization and billing can also be performed at the `store_id` level.
		 * </pre>
		 *
		 * <code>string store_id = 1;</code>
		 *
		 * @return The bytes for storeId.
		 */
		public com.google.protobuf.ByteString
		getStoreIdBytes() {
			java.lang.Object ref = storeId_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b =
						com.google.protobuf.ByteString.copyFromUtf8(
								(java.lang.String) ref);
				storeId_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <pre>
		 * `store_id` is a keyspace identifier.
		 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
		 * All APIs operate within a single `store_id`.
		 * It is up to clients to use single or multiple stores for their use-case.
		 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
		 * Authorization and billing can also be performed at the `store_id` level.
		 * </pre>
		 *
		 * <code>string store_id = 1;</code>
		 *
		 * @param value The storeId to set.
		 * @return This builder for chaining.
		 */
		public Builder setStoreId(
				java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			storeId_ = value;
			bitField0_ |= 0x00000001;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `store_id` is a keyspace identifier.
		 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
		 * All APIs operate within a single `store_id`.
		 * It is up to clients to use single or multiple stores for their use-case.
		 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
		 * Authorization and billing can also be performed at the `store_id` level.
		 * </pre>
		 *
		 * <code>string store_id = 1;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearStoreId() {
			storeId_ = getDefaultInstance().getStoreId();
			bitField0_ = (bitField0_ & ~0x00000001);
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `store_id` is a keyspace identifier.
		 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
		 * All APIs operate within a single `store_id`.
		 * It is up to clients to use single or multiple stores for their use-case.
		 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
		 * Authorization and billing can also be performed at the `store_id` level.
		 * </pre>
		 *
		 * <code>string store_id = 1;</code>
		 *
		 * @param value The bytes for storeId to set.
		 * @return This builder for chaining.
		 */
		public Builder setStoreIdBytes(
				com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			checkByteStringIsUtf8(value);
			storeId_ = value;
			bitField0_ |= 0x00000001;
			onChanged();
			return this;
		}

		private java.lang.Object keyPrefix_ = "";

		/**
		 * <pre>
		 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
		 * a way to organize key-values in a similar way to directories.
		 *
		 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
		 * the specified prefix.
		 *
		 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
		 * the response.
		 * </pre>
		 *
		 * <code>optional string key_prefix = 2;</code>
		 *
		 * @return Whether the keyPrefix field is set.
		 */
		public boolean hasKeyPrefix() {
			return ((bitField0_ & 0x00000002) != 0);
		}

		/**
		 * <pre>
		 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
		 * a way to organize key-values in a similar way to directories.
		 *
		 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
		 * the specified prefix.
		 *
		 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
		 * the response.
		 * </pre>
		 *
		 * <code>optional string key_prefix = 2;</code>
		 *
		 * @return The keyPrefix.
		 */
		public java.lang.String getKeyPrefix() {
			java.lang.Object ref = keyPrefix_;
			if (!(ref instanceof java.lang.String)) {
				com.google.protobuf.ByteString bs =
						(com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				keyPrefix_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <pre>
		 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
		 * a way to organize key-values in a similar way to directories.
		 *
		 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
		 * the specified prefix.
		 *
		 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
		 * the response.
		 * </pre>
		 *
		 * <code>optional string key_prefix = 2;</code>
		 *
		 * @return The bytes for keyPrefix.
		 */
		public com.google.protobuf.ByteString
		getKeyPrefixBytes() {
			java.lang.Object ref = keyPrefix_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b =
						com.google.protobuf.ByteString.copyFromUtf8(
								(java.lang.String) ref);
				keyPrefix_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <pre>
		 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
		 * a way to organize key-values in a similar way to directories.
		 *
		 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
		 * the specified prefix.
		 *
		 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
		 * the response.
		 * </pre>
		 *
		 * <code>optional string key_prefix = 2;</code>
		 *
		 * @param value The keyPrefix to set.
		 * @return This builder for chaining.
		 */
		public Builder setKeyPrefix(
				java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			keyPrefix_ = value;
			bitField0_ |= 0x00000002;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
		 * a way to organize key-values in a similar way to directories.
		 *
		 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
		 * the specified prefix.
		 *
		 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
		 * the response.
		 * </pre>
		 *
		 * <code>optional string key_prefix = 2;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearKeyPrefix() {
			keyPrefix_ = getDefaultInstance().getKeyPrefix();
			bitField0_ = (bitField0_ & ~0x00000002);
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
		 * a way to organize key-values in a similar way to directories.
		 *
		 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
		 * the specified prefix.
		 *
		 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
		 * the response.
		 * </pre>
		 *
		 * <code>optional string key_prefix = 2;</code>
		 *
		 * @param value The bytes for keyPrefix to set.
		 * @return This builder for chaining.
		 */
		public Builder setKeyPrefixBytes(
				com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			checkByteStringIsUtf8(value);
			keyPrefix_ = value;
			bitField0_ |= 0x00000002;
			onChanged();
			return this;
		}

		private int pageSize_;

		/**
		 * <pre>
		 * `page_size` is used by clients to specify the maximum number of results that can be returned by
		 * the server.
		 * The server may further constrain the maximum number of results returned in a single page.
		 * If the `page_size` is 0 or not set, the server will decide the number of results to be returned.
		 * </pre>
		 *
		 * <code>optional int32 page_size = 3;</code>
		 *
		 * @return Whether the pageSize field is set.
		 */
		@java.lang.Override
		public boolean hasPageSize() {
			return ((bitField0_ & 0x00000004) != 0);
		}

		/**
		 * <pre>
		 * `page_size` is used by clients to specify the maximum number of results that can be returned by
		 * the server.
		 * The server may further constrain the maximum number of results returned in a single page.
		 * If the `page_size` is 0 or not set, the server will decide the number of results to be returned.
		 * </pre>
		 *
		 * <code>optional int32 page_size = 3;</code>
		 *
		 * @return The pageSize.
		 */
		@java.lang.Override
		public int getPageSize() {
			return pageSize_;
		}

		/**
		 * <pre>
		 * `page_size` is used by clients to specify the maximum number of results that can be returned by
		 * the server.
		 * The server may further constrain the maximum number of results returned in a single page.
		 * If the `page_size` is 0 or not set, the server will decide the number of results to be returned.
		 * </pre>
		 *
		 * <code>optional int32 page_size = 3;</code>
		 *
		 * @param value The pageSize to set.
		 * @return This builder for chaining.
		 */
		public Builder setPageSize(int value) {

			pageSize_ = value;
			bitField0_ |= 0x00000004;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `page_size` is used by clients to specify the maximum number of results that can be returned by
		 * the server.
		 * The server may further constrain the maximum number of results returned in a single page.
		 * If the `page_size` is 0 or not set, the server will decide the number of results to be returned.
		 * </pre>
		 *
		 * <code>optional int32 page_size = 3;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearPageSize() {
			bitField0_ = (bitField0_ & ~0x00000004);
			pageSize_ = 0;
			onChanged();
			return this;
		}

		private java.lang.Object pageToken_ = "";

		/**
		 * <pre>
		 * `page_token` is a pagination token.
		 *
		 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
		 *
		 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
		 * page's `ListKeyVersionsResponse`.
		 * </pre>
		 *
		 * <code>optional string page_token = 4;</code>
		 *
		 * @return Whether the pageToken field is set.
		 */
		public boolean hasPageToken() {
			return ((bitField0_ & 0x00000008) != 0);
		}

		/**
		 * <pre>
		 * `page_token` is a pagination token.
		 *
		 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
		 *
		 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
		 * page's `ListKeyVersionsResponse`.
		 * </pre>
		 *
		 * <code>optional string page_token = 4;</code>
		 *
		 * @return The pageToken.
		 */
		public java.lang.String getPageToken() {
			java.lang.Object ref = pageToken_;
			if (!(ref instanceof java.lang.String)) {
				com.google.protobuf.ByteString bs =
						(com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				pageToken_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <pre>
		 * `page_token` is a pagination token.
		 *
		 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
		 *
		 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
		 * page's `ListKeyVersionsResponse`.
		 * </pre>
		 *
		 * <code>optional string page_token = 4;</code>
		 *
		 * @return The bytes for pageToken.
		 */
		public com.google.protobuf.ByteString
		getPageTokenBytes() {
			java.lang.Object ref = pageToken_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b =
						com.google.protobuf.ByteString.copyFromUtf8(
								(java.lang.String) ref);
				pageToken_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <pre>
		 * `page_token` is a pagination token.
		 *
		 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
		 *
		 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
		 * page's `ListKeyVersionsResponse`.
		 * </pre>
		 *
		 * <code>optional string page_token = 4;</code>
		 *
		 * @param value The pageToken to set.
		 * @return This builder for chaining.
		 */
		public Builder setPageToken(
				java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			pageToken_ = value;
			bitField0_ |= 0x00000008;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `page_token` is a pagination token.
		 *
		 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
		 *
		 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
		 * page's `ListKeyVersionsResponse`.
		 * </pre>
		 *
		 * <code>optional string page_token = 4;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearPageToken() {
			pageToken_ = getDefaultInstance().getPageToken();
			bitField0_ = (bitField0_ & ~0x00000008);
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * `page_token` is a pagination token.
		 *
		 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
		 *
		 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
		 * page's `ListKeyVersionsResponse`.
		 * </pre>
		 *
		 * <code>optional string page_token = 4;</code>
		 *
		 * @param value The bytes for pageToken to set.
		 * @return This builder for chaining.
		 */
		public Builder setPageTokenBytes(
				com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			checkByteStringIsUtf8(value);
			pageToken_ = value;
			bitField0_ |= 0x00000008;
			onChanged();
			return this;
		}

		@java.lang.Override
		public final Builder setUnknownFields(
				final com.google.protobuf.UnknownFieldSet unknownFields) {
			return super.setUnknownFields(unknownFields);
		}

		@java.lang.Override
		public final Builder mergeUnknownFields(
				final com.google.protobuf.UnknownFieldSet unknownFields) {
			return super.mergeUnknownFields(unknownFields);
		}


		// @@protoc_insertion_point(builder_scope:vss.ListKeyVersionsRequest)
	}

	// @@protoc_insertion_point(class_scope:vss.ListKeyVersionsRequest)
	private static final org.vss.ListKeyVersionsRequest DEFAULT_INSTANCE;

	static {
		DEFAULT_INSTANCE = new org.vss.ListKeyVersionsRequest();
	}

	public static org.vss.ListKeyVersionsRequest getDefaultInstance() {
		return DEFAULT_INSTANCE;
	}

	private static final com.google.protobuf.Parser<ListKeyVersionsRequest>
			PARSER = new com.google.protobuf.AbstractParser<ListKeyVersionsRequest>() {
		@java.lang.Override
		public ListKeyVersionsRequest parsePartialFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			Builder builder = newBuilder();
			try {
				builder.mergeFrom(input, extensionRegistry);
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.setUnfinishedMessage(builder.buildPartial());
			} catch (com.google.protobuf.UninitializedMessageException e) {
				throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
			} catch (java.io.IOException e) {
				throw new com.google.protobuf.InvalidProtocolBufferException(e)
						.setUnfinishedMessage(builder.buildPartial());
			}
			return builder.buildPartial();
		}
	};

	public static com.google.protobuf.Parser<ListKeyVersionsRequest> parser() {
		return PARSER;
	}

	@java.lang.Override
	public com.google.protobuf.Parser<ListKeyVersionsRequest> getParserForType() {
		return PARSER;
	}

	@java.lang.Override
	public org.vss.ListKeyVersionsRequest getDefaultInstanceForType() {
		return DEFAULT_INSTANCE;
	}

}

