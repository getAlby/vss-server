// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vss.proto

// Protobuf Java Version: 3.25.5
package org.vss;

public interface ListKeyVersionsResponseOrBuilder extends
		// @@protoc_insertion_point(interface_extends:vss.ListKeyVersionsResponse)
		com.google.protobuf.MessageOrBuilder {

	/**
	 * <pre>
	 * Fetched keys and versions.
	 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue key_versions = 1;</code>
	 */
	java.util.List<org.vss.KeyValue>
	getKeyVersionsList();

	/**
	 * <pre>
	 * Fetched keys and versions.
	 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue key_versions = 1;</code>
	 */
	org.vss.KeyValue getKeyVersions(int index);

	/**
	 * <pre>
	 * Fetched keys and versions.
	 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue key_versions = 1;</code>
	 */
	int getKeyVersionsCount();

	/**
	 * <pre>
	 * Fetched keys and versions.
	 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue key_versions = 1;</code>
	 */
	java.util.List<? extends org.vss.KeyValueOrBuilder>
	getKeyVersionsOrBuilderList();

	/**
	 * <pre>
	 * Fetched keys and versions.
	 * Even though this API reuses the `KeyValue` struct, the `value` sub-field will not be set by the server.
	 * </pre>
	 *
	 * <code>repeated .vss.KeyValue key_versions = 1;</code>
	 */
	org.vss.KeyValueOrBuilder getKeyVersionsOrBuilder(
			int index);

	/**
	 * <pre>
	 * `next_page_token` is a pagination token, used to retrieve the next page of results.
	 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
	 * this value as the `page_token` in the next request.
	 *
	 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
	 * there is no more data to be retrieved.
	 *
	 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
	 * result set. The only way to know when you have reached the end of the result set is when
	 * `next_page_token` is empty.
	 *
	 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
	 * paginated response.
	 * </pre>
	 *
	 * <code>optional string next_page_token = 2;</code>
	 *
	 * @return Whether the nextPageToken field is set.
	 */
	boolean hasNextPageToken();

	/**
	 * <pre>
	 * `next_page_token` is a pagination token, used to retrieve the next page of results.
	 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
	 * this value as the `page_token` in the next request.
	 *
	 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
	 * there is no more data to be retrieved.
	 *
	 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
	 * result set. The only way to know when you have reached the end of the result set is when
	 * `next_page_token` is empty.
	 *
	 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
	 * paginated response.
	 * </pre>
	 *
	 * <code>optional string next_page_token = 2;</code>
	 *
	 * @return The nextPageToken.
	 */
	java.lang.String getNextPageToken();

	/**
	 * <pre>
	 * `next_page_token` is a pagination token, used to retrieve the next page of results.
	 * Use this value to query for next-page of paginated `ListKeyVersions` operation, by specifying
	 * this value as the `page_token` in the next request.
	 *
	 * If `next_page_token` is empty (""), then the "last page" of results has been processed and
	 * there is no more data to be retrieved.
	 *
	 * If `next_page_token` is not empty, it does not necessarily mean that there is more data in the
	 * result set. The only way to know when you have reached the end of the result set is when
	 * `next_page_token` is empty.
	 *
	 * Caution: Clients must not assume a specific number of key_versions to be present in a page for
	 * paginated response.
	 * </pre>
	 *
	 * <code>optional string next_page_token = 2;</code>
	 *
	 * @return The bytes for nextPageToken.
	 */
	com.google.protobuf.ByteString
	getNextPageTokenBytes();

	/**
	 * <pre>
	 * `global_version` is a sequence-number/version of the whole store.
	 *
	 * `global_version` is only returned in response for the first page of the `ListKeyVersionsResponse`
	 * and is guaranteed to be read before reading any key-versions.
	 *
	 * In case of refreshing the complete key-version view on the client-side, correct usage for
	 * the returned `global_version` is as following:
	 *   1. Read `global_version` from the first page of paginated response and save it as local variable.
	 *   2. Update all the `key_versions` on client-side from all the pages of paginated response.
	 *   3. Update `global_version` on client_side from the local variable saved in step-1.
	 * This ensures that on client-side, all current `key_versions` were stored at `global_version` or later.
	 * This guarantee is helpful for ensuring the versioning correctness if using the `global_version`
	 * in `PutObject` API and can help avoid the race conditions related to it.
	 * </pre>
	 *
	 * <code>optional int64 global_version = 3;</code>
	 *
	 * @return Whether the globalVersion field is set.
	 */
	boolean hasGlobalVersion();

	/**
	 * <pre>
	 * `global_version` is a sequence-number/version of the whole store.
	 *
	 * `global_version` is only returned in response for the first page of the `ListKeyVersionsResponse`
	 * and is guaranteed to be read before reading any key-versions.
	 *
	 * In case of refreshing the complete key-version view on the client-side, correct usage for
	 * the returned `global_version` is as following:
	 *   1. Read `global_version` from the first page of paginated response and save it as local variable.
	 *   2. Update all the `key_versions` on client-side from all the pages of paginated response.
	 *   3. Update `global_version` on client_side from the local variable saved in step-1.
	 * This ensures that on client-side, all current `key_versions` were stored at `global_version` or later.
	 * This guarantee is helpful for ensuring the versioning correctness if using the `global_version`
	 * in `PutObject` API and can help avoid the race conditions related to it.
	 * </pre>
	 *
	 * <code>optional int64 global_version = 3;</code>
	 *
	 * @return The globalVersion.
	 */
	long getGlobalVersion();
}
