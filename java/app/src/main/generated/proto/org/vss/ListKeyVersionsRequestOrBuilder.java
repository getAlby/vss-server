// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vss.proto

// Protobuf Java Version: 3.25.5
package org.vss;

public interface ListKeyVersionsRequestOrBuilder extends
		// @@protoc_insertion_point(interface_extends:vss.ListKeyVersionsRequest)
		com.google.protobuf.MessageOrBuilder {

	/**
	 * <pre>
	 * `store_id` is a keyspace identifier.
	 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
	 * All APIs operate within a single `store_id`.
	 * It is up to clients to use single or multiple stores for their use-case.
	 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
	 * Authorization and billing can also be performed at the `store_id` level.
	 * </pre>
	 *
	 * <code>string store_id = 1;</code>
	 *
	 * @return The storeId.
	 */
	java.lang.String getStoreId();

	/**
	 * <pre>
	 * `store_id` is a keyspace identifier.
	 * Ref: https://en.wikipedia.org/wiki/Keyspace_(distributed_data_store)
	 * All APIs operate within a single `store_id`.
	 * It is up to clients to use single or multiple stores for their use-case.
	 * This can be used for client-isolation/ rate-limiting / throttling on the server-side.
	 * Authorization and billing can also be performed at the `store_id` level.
	 * </pre>
	 *
	 * <code>string store_id = 1;</code>
	 *
	 * @return The bytes for storeId.
	 */
	com.google.protobuf.ByteString
	getStoreIdBytes();

	/**
	 * <pre>
	 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
	 * a way to organize key-values in a similar way to directories.
	 *
	 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
	 * the specified prefix.
	 *
	 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
	 * the response.
	 * </pre>
	 *
	 * <code>optional string key_prefix = 2;</code>
	 *
	 * @return Whether the keyPrefix field is set.
	 */
	boolean hasKeyPrefix();

	/**
	 * <pre>
	 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
	 * a way to organize key-values in a similar way to directories.
	 *
	 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
	 * the specified prefix.
	 *
	 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
	 * the response.
	 * </pre>
	 *
	 * <code>optional string key_prefix = 2;</code>
	 *
	 * @return The keyPrefix.
	 */
	java.lang.String getKeyPrefix();

	/**
	 * <pre>
	 * A `key_prefix` is a string of characters at the beginning of the key. Prefixes can be used as
	 * a way to organize key-values in a similar way to directories.
	 *
	 * If `key_prefix` is specified, the response results will be limited to those keys that begin with
	 * the specified prefix.
	 *
	 * If no `key_prefix` is specified or it is empty (""), all the keys are eligible to be returned in
	 * the response.
	 * </pre>
	 *
	 * <code>optional string key_prefix = 2;</code>
	 *
	 * @return The bytes for keyPrefix.
	 */
	com.google.protobuf.ByteString
	getKeyPrefixBytes();

	/**
	 * <pre>
	 * `page_size` is used by clients to specify the maximum number of results that can be returned by
	 * the server.
	 * The server may further constrain the maximum number of results returned in a single page.
	 * If the `page_size` is 0 or not set, the server will decide the number of results to be returned.
	 * </pre>
	 *
	 * <code>optional int32 page_size = 3;</code>
	 *
	 * @return Whether the pageSize field is set.
	 */
	boolean hasPageSize();

	/**
	 * <pre>
	 * `page_size` is used by clients to specify the maximum number of results that can be returned by
	 * the server.
	 * The server may further constrain the maximum number of results returned in a single page.
	 * If the `page_size` is 0 or not set, the server will decide the number of results to be returned.
	 * </pre>
	 *
	 * <code>optional int32 page_size = 3;</code>
	 *
	 * @return The pageSize.
	 */
	int getPageSize();

	/**
	 * <pre>
	 * `page_token` is a pagination token.
	 *
	 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
	 *
	 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
	 * page's `ListKeyVersionsResponse`.
	 * </pre>
	 *
	 * <code>optional string page_token = 4;</code>
	 *
	 * @return Whether the pageToken field is set.
	 */
	boolean hasPageToken();

	/**
	 * <pre>
	 * `page_token` is a pagination token.
	 *
	 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
	 *
	 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
	 * page's `ListKeyVersionsResponse`.
	 * </pre>
	 *
	 * <code>optional string page_token = 4;</code>
	 *
	 * @return The pageToken.
	 */
	java.lang.String getPageToken();

	/**
	 * <pre>
	 * `page_token` is a pagination token.
	 *
	 * To query for the first page of `ListKeyVersions`, `page_token` must not be specified.
	 *
	 * For subsequent pages, use the value that was returned as `next_page_token` in the previous
	 * page's `ListKeyVersionsResponse`.
	 * </pre>
	 *
	 * <code>optional string page_token = 4;</code>
	 *
	 * @return The bytes for pageToken.
	 */
	com.google.protobuf.ByteString
	getPageTokenBytes();
}
