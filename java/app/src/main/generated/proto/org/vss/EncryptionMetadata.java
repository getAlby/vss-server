// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vss.proto

// Protobuf Java Version: 3.25.5
package org.vss;

/**
 * <pre>
 * Represents encryption related metadata
 * </pre>
 * <p>
 * Protobuf type {@code vss.EncryptionMetadata}
 */
public final class EncryptionMetadata extends
		com.google.protobuf.GeneratedMessageV3 implements
		// @@protoc_insertion_point(message_implements:vss.EncryptionMetadata)
		EncryptionMetadataOrBuilder {
	private static final long serialVersionUID = 0L;

	// Use EncryptionMetadata.newBuilder() to construct.
	private EncryptionMetadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
		super(builder);
	}

	private EncryptionMetadata() {
		cipherFormat_ = "";
		nonce_ = com.google.protobuf.ByteString.EMPTY;
		tag_ = com.google.protobuf.ByteString.EMPTY;
	}

	@java.lang.Override
	@SuppressWarnings({"unused"})
	protected java.lang.Object newInstance(
			UnusedPrivateParameter unused) {
		return new EncryptionMetadata();
	}

	public static final com.google.protobuf.Descriptors.Descriptor
	getDescriptor() {
		return org.vss.Vss.internal_static_vss_EncryptionMetadata_descriptor;
	}

	@java.lang.Override
	protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
	internalGetFieldAccessorTable() {
		return org.vss.Vss.internal_static_vss_EncryptionMetadata_fieldAccessorTable
				.ensureFieldAccessorsInitialized(
						org.vss.EncryptionMetadata.class, org.vss.EncryptionMetadata.Builder.class);
	}

	public static final int CIPHER_FORMAT_FIELD_NUMBER = 1;
	@SuppressWarnings("serial")
	private volatile java.lang.Object cipherFormat_ = "";

	/**
	 * <pre>
	 * The encryption algorithm used for encrypting the `PlaintextBlob`.
	 * </pre>
	 *
	 * <code>string cipher_format = 1;</code>
	 *
	 * @return The cipherFormat.
	 */
	@java.lang.Override
	public java.lang.String getCipherFormat() {
		java.lang.Object ref = cipherFormat_;
		if (ref instanceof java.lang.String) {
			return (java.lang.String) ref;
		} else {
			com.google.protobuf.ByteString bs =
					(com.google.protobuf.ByteString) ref;
			java.lang.String s = bs.toStringUtf8();
			cipherFormat_ = s;
			return s;
		}
	}

	/**
	 * <pre>
	 * The encryption algorithm used for encrypting the `PlaintextBlob`.
	 * </pre>
	 *
	 * <code>string cipher_format = 1;</code>
	 *
	 * @return The bytes for cipherFormat.
	 */
	@java.lang.Override
	public com.google.protobuf.ByteString
	getCipherFormatBytes() {
		java.lang.Object ref = cipherFormat_;
		if (ref instanceof java.lang.String) {
			com.google.protobuf.ByteString b =
					com.google.protobuf.ByteString.copyFromUtf8(
							(java.lang.String) ref);
			cipherFormat_ = b;
			return b;
		} else {
			return (com.google.protobuf.ByteString) ref;
		}
	}

	public static final int NONCE_FIELD_NUMBER = 2;
	private com.google.protobuf.ByteString nonce_ = com.google.protobuf.ByteString.EMPTY;

	/**
	 * <pre>
	 * The nonce used for encryption. Nonce is a random or unique value used to ensure that the same
	 * plaintext results in different ciphertexts every time it is encrypted.
	 * </pre>
	 *
	 * <code>bytes nonce = 2;</code>
	 *
	 * @return The nonce.
	 */
	@java.lang.Override
	public com.google.protobuf.ByteString getNonce() {
		return nonce_;
	}

	public static final int TAG_FIELD_NUMBER = 3;
	private com.google.protobuf.ByteString tag_ = com.google.protobuf.ByteString.EMPTY;

	/**
	 * <pre>
	 * The authentication tag used for encryption. It provides integrity and authenticity assurance
	 * for the encrypted data.
	 * </pre>
	 *
	 * <code>bytes tag = 3;</code>
	 *
	 * @return The tag.
	 */
	@java.lang.Override
	public com.google.protobuf.ByteString getTag() {
		return tag_;
	}

	private byte memoizedIsInitialized = -1;

	@java.lang.Override
	public final boolean isInitialized() {
		byte isInitialized = memoizedIsInitialized;
		if (isInitialized == 1) return true;
		if (isInitialized == 0) return false;

		memoizedIsInitialized = 1;
		return true;
	}

	@java.lang.Override
	public void writeTo(com.google.protobuf.CodedOutputStream output)
			throws java.io.IOException {
		if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(cipherFormat_)) {
			com.google.protobuf.GeneratedMessageV3.writeString(output, 1, cipherFormat_);
		}
		if (!nonce_.isEmpty()) {
			output.writeBytes(2, nonce_);
		}
		if (!tag_.isEmpty()) {
			output.writeBytes(3, tag_);
		}
		getUnknownFields().writeTo(output);
	}

	@java.lang.Override
	public int getSerializedSize() {
		int size = memoizedSize;
		if (size != -1) return size;

		size = 0;
		if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(cipherFormat_)) {
			size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, cipherFormat_);
		}
		if (!nonce_.isEmpty()) {
			size += com.google.protobuf.CodedOutputStream
					.computeBytesSize(2, nonce_);
		}
		if (!tag_.isEmpty()) {
			size += com.google.protobuf.CodedOutputStream
					.computeBytesSize(3, tag_);
		}
		size += getUnknownFields().getSerializedSize();
		memoizedSize = size;
		return size;
	}

	@java.lang.Override
	public boolean equals(final java.lang.Object obj) {
		if (obj == this) {
			return true;
		}
		if (!(obj instanceof org.vss.EncryptionMetadata)) {
			return super.equals(obj);
		}
		org.vss.EncryptionMetadata other = (org.vss.EncryptionMetadata) obj;

		if (!getCipherFormat()
				.equals(other.getCipherFormat())) return false;
		if (!getNonce()
				.equals(other.getNonce())) return false;
		if (!getTag()
				.equals(other.getTag())) return false;
		if (!getUnknownFields().equals(other.getUnknownFields())) return false;
		return true;
	}

	@java.lang.Override
	public int hashCode() {
		if (memoizedHashCode != 0) {
			return memoizedHashCode;
		}
		int hash = 41;
		hash = (19 * hash) + getDescriptor().hashCode();
		hash = (37 * hash) + CIPHER_FORMAT_FIELD_NUMBER;
		hash = (53 * hash) + getCipherFormat().hashCode();
		hash = (37 * hash) + NONCE_FIELD_NUMBER;
		hash = (53 * hash) + getNonce().hashCode();
		hash = (37 * hash) + TAG_FIELD_NUMBER;
		hash = (53 * hash) + getTag().hashCode();
		hash = (29 * hash) + getUnknownFields().hashCode();
		memoizedHashCode = hash;
		return hash;
	}

	public static org.vss.EncryptionMetadata parseFrom(
			java.nio.ByteBuffer data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.EncryptionMetadata parseFrom(
			java.nio.ByteBuffer data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.EncryptionMetadata parseFrom(
			com.google.protobuf.ByteString data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.EncryptionMetadata parseFrom(
			com.google.protobuf.ByteString data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.EncryptionMetadata parseFrom(byte[] data)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data);
	}

	public static org.vss.EncryptionMetadata parseFrom(
			byte[] data,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws com.google.protobuf.InvalidProtocolBufferException {
		return PARSER.parseFrom(data, extensionRegistry);
	}

	public static org.vss.EncryptionMetadata parseFrom(java.io.InputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input);
	}

	public static org.vss.EncryptionMetadata parseFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input, extensionRegistry);
	}

	public static org.vss.EncryptionMetadata parseDelimitedFrom(java.io.InputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseDelimitedWithIOException(PARSER, input);
	}

	public static org.vss.EncryptionMetadata parseDelimitedFrom(
			java.io.InputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
	}

	public static org.vss.EncryptionMetadata parseFrom(
			com.google.protobuf.CodedInputStream input)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input);
	}

	public static org.vss.EncryptionMetadata parseFrom(
			com.google.protobuf.CodedInputStream input,
			com.google.protobuf.ExtensionRegistryLite extensionRegistry)
			throws java.io.IOException {
		return com.google.protobuf.GeneratedMessageV3
				.parseWithIOException(PARSER, input, extensionRegistry);
	}

	@java.lang.Override
	public Builder newBuilderForType() {
		return newBuilder();
	}

	public static Builder newBuilder() {
		return DEFAULT_INSTANCE.toBuilder();
	}

	public static Builder newBuilder(org.vss.EncryptionMetadata prototype) {
		return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
	}

	@java.lang.Override
	public Builder toBuilder() {
		return this == DEFAULT_INSTANCE
				? new Builder() : new Builder().mergeFrom(this);
	}

	@java.lang.Override
	protected Builder newBuilderForType(
			com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
		Builder builder = new Builder(parent);
		return builder;
	}

	/**
	 * <pre>
	 * Represents encryption related metadata
	 * </pre>
	 * <p>
	 * Protobuf type {@code vss.EncryptionMetadata}
	 */
	public static final class Builder extends
			com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
			// @@protoc_insertion_point(builder_implements:vss.EncryptionMetadata)
			org.vss.EncryptionMetadataOrBuilder {
		public static final com.google.protobuf.Descriptors.Descriptor
		getDescriptor() {
			return org.vss.Vss.internal_static_vss_EncryptionMetadata_descriptor;
		}

		@java.lang.Override
		protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
		internalGetFieldAccessorTable() {
			return org.vss.Vss.internal_static_vss_EncryptionMetadata_fieldAccessorTable
					.ensureFieldAccessorsInitialized(
							org.vss.EncryptionMetadata.class, org.vss.EncryptionMetadata.Builder.class);
		}

		// Construct using org.vss.EncryptionMetadata.newBuilder()
		private Builder() {

		}

		private Builder(
				com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
			super(parent);

		}

		@java.lang.Override
		public Builder clear() {
			super.clear();
			bitField0_ = 0;
			cipherFormat_ = "";
			nonce_ = com.google.protobuf.ByteString.EMPTY;
			tag_ = com.google.protobuf.ByteString.EMPTY;
			return this;
		}

		@java.lang.Override
		public com.google.protobuf.Descriptors.Descriptor
		getDescriptorForType() {
			return org.vss.Vss.internal_static_vss_EncryptionMetadata_descriptor;
		}

		@java.lang.Override
		public org.vss.EncryptionMetadata getDefaultInstanceForType() {
			return org.vss.EncryptionMetadata.getDefaultInstance();
		}

		@java.lang.Override
		public org.vss.EncryptionMetadata build() {
			org.vss.EncryptionMetadata result = buildPartial();
			if (!result.isInitialized()) {
				throw newUninitializedMessageException(result);
			}
			return result;
		}

		@java.lang.Override
		public org.vss.EncryptionMetadata buildPartial() {
			org.vss.EncryptionMetadata result = new org.vss.EncryptionMetadata(this);
			if (bitField0_ != 0) {
				buildPartial0(result);
			}
			onBuilt();
			return result;
		}

		private void buildPartial0(org.vss.EncryptionMetadata result) {
			int from_bitField0_ = bitField0_;
			if (((from_bitField0_ & 0x00000001) != 0)) {
				result.cipherFormat_ = cipherFormat_;
			}
			if (((from_bitField0_ & 0x00000002) != 0)) {
				result.nonce_ = nonce_;
			}
			if (((from_bitField0_ & 0x00000004) != 0)) {
				result.tag_ = tag_;
			}
		}

		@java.lang.Override
		public Builder clone() {
			return super.clone();
		}

		@java.lang.Override
		public Builder setField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				java.lang.Object value) {
			return super.setField(field, value);
		}

		@java.lang.Override
		public Builder clearField(
				com.google.protobuf.Descriptors.FieldDescriptor field) {
			return super.clearField(field);
		}

		@java.lang.Override
		public Builder clearOneof(
				com.google.protobuf.Descriptors.OneofDescriptor oneof) {
			return super.clearOneof(oneof);
		}

		@java.lang.Override
		public Builder setRepeatedField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				int index, java.lang.Object value) {
			return super.setRepeatedField(field, index, value);
		}

		@java.lang.Override
		public Builder addRepeatedField(
				com.google.protobuf.Descriptors.FieldDescriptor field,
				java.lang.Object value) {
			return super.addRepeatedField(field, value);
		}

		@java.lang.Override
		public Builder mergeFrom(com.google.protobuf.Message other) {
			if (other instanceof org.vss.EncryptionMetadata) {
				return mergeFrom((org.vss.EncryptionMetadata) other);
			} else {
				super.mergeFrom(other);
				return this;
			}
		}

		public Builder mergeFrom(org.vss.EncryptionMetadata other) {
			if (other == org.vss.EncryptionMetadata.getDefaultInstance()) return this;
			if (!other.getCipherFormat().isEmpty()) {
				cipherFormat_ = other.cipherFormat_;
				bitField0_ |= 0x00000001;
				onChanged();
			}
			if (other.getNonce() != com.google.protobuf.ByteString.EMPTY) {
				setNonce(other.getNonce());
			}
			if (other.getTag() != com.google.protobuf.ByteString.EMPTY) {
				setTag(other.getTag());
			}
			this.mergeUnknownFields(other.getUnknownFields());
			onChanged();
			return this;
		}

		@java.lang.Override
		public final boolean isInitialized() {
			return true;
		}

		@java.lang.Override
		public Builder mergeFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws java.io.IOException {
			if (extensionRegistry == null) {
				throw new java.lang.NullPointerException();
			}
			try {
				boolean done = false;
				while (!done) {
					int tag = input.readTag();
					switch (tag) {
						case 0:
							done = true;
							break;
						case 10: {
							cipherFormat_ = input.readStringRequireUtf8();
							bitField0_ |= 0x00000001;
							break;
						} // case 10
						case 18: {
							nonce_ = input.readBytes();
							bitField0_ |= 0x00000002;
							break;
						} // case 18
						case 26: {
							tag_ = input.readBytes();
							bitField0_ |= 0x00000004;
							break;
						} // case 26
						default: {
							if (!super.parseUnknownField(input, extensionRegistry, tag)) {
								done = true; // was an endgroup tag
							}
							break;
						} // default:
					} // switch (tag)
				} // while (!done)
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.unwrapIOException();
			} finally {
				onChanged();
			} // finally
			return this;
		}

		private int bitField0_;

		private java.lang.Object cipherFormat_ = "";

		/**
		 * <pre>
		 * The encryption algorithm used for encrypting the `PlaintextBlob`.
		 * </pre>
		 *
		 * <code>string cipher_format = 1;</code>
		 *
		 * @return The cipherFormat.
		 */
		public java.lang.String getCipherFormat() {
			java.lang.Object ref = cipherFormat_;
			if (!(ref instanceof java.lang.String)) {
				com.google.protobuf.ByteString bs =
						(com.google.protobuf.ByteString) ref;
				java.lang.String s = bs.toStringUtf8();
				cipherFormat_ = s;
				return s;
			} else {
				return (java.lang.String) ref;
			}
		}

		/**
		 * <pre>
		 * The encryption algorithm used for encrypting the `PlaintextBlob`.
		 * </pre>
		 *
		 * <code>string cipher_format = 1;</code>
		 *
		 * @return The bytes for cipherFormat.
		 */
		public com.google.protobuf.ByteString
		getCipherFormatBytes() {
			java.lang.Object ref = cipherFormat_;
			if (ref instanceof String) {
				com.google.protobuf.ByteString b =
						com.google.protobuf.ByteString.copyFromUtf8(
								(java.lang.String) ref);
				cipherFormat_ = b;
				return b;
			} else {
				return (com.google.protobuf.ByteString) ref;
			}
		}

		/**
		 * <pre>
		 * The encryption algorithm used for encrypting the `PlaintextBlob`.
		 * </pre>
		 *
		 * <code>string cipher_format = 1;</code>
		 *
		 * @param value The cipherFormat to set.
		 * @return This builder for chaining.
		 */
		public Builder setCipherFormat(
				java.lang.String value) {
			if (value == null) {
				throw new NullPointerException();
			}
			cipherFormat_ = value;
			bitField0_ |= 0x00000001;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * The encryption algorithm used for encrypting the `PlaintextBlob`.
		 * </pre>
		 *
		 * <code>string cipher_format = 1;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearCipherFormat() {
			cipherFormat_ = getDefaultInstance().getCipherFormat();
			bitField0_ = (bitField0_ & ~0x00000001);
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * The encryption algorithm used for encrypting the `PlaintextBlob`.
		 * </pre>
		 *
		 * <code>string cipher_format = 1;</code>
		 *
		 * @param value The bytes for cipherFormat to set.
		 * @return This builder for chaining.
		 */
		public Builder setCipherFormatBytes(
				com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			checkByteStringIsUtf8(value);
			cipherFormat_ = value;
			bitField0_ |= 0x00000001;
			onChanged();
			return this;
		}

		private com.google.protobuf.ByteString nonce_ = com.google.protobuf.ByteString.EMPTY;

		/**
		 * <pre>
		 * The nonce used for encryption. Nonce is a random or unique value used to ensure that the same
		 * plaintext results in different ciphertexts every time it is encrypted.
		 * </pre>
		 *
		 * <code>bytes nonce = 2;</code>
		 *
		 * @return The nonce.
		 */
		@java.lang.Override
		public com.google.protobuf.ByteString getNonce() {
			return nonce_;
		}

		/**
		 * <pre>
		 * The nonce used for encryption. Nonce is a random or unique value used to ensure that the same
		 * plaintext results in different ciphertexts every time it is encrypted.
		 * </pre>
		 *
		 * <code>bytes nonce = 2;</code>
		 *
		 * @param value The nonce to set.
		 * @return This builder for chaining.
		 */
		public Builder setNonce(com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			nonce_ = value;
			bitField0_ |= 0x00000002;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * The nonce used for encryption. Nonce is a random or unique value used to ensure that the same
		 * plaintext results in different ciphertexts every time it is encrypted.
		 * </pre>
		 *
		 * <code>bytes nonce = 2;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearNonce() {
			bitField0_ = (bitField0_ & ~0x00000002);
			nonce_ = getDefaultInstance().getNonce();
			onChanged();
			return this;
		}

		private com.google.protobuf.ByteString tag_ = com.google.protobuf.ByteString.EMPTY;

		/**
		 * <pre>
		 * The authentication tag used for encryption. It provides integrity and authenticity assurance
		 * for the encrypted data.
		 * </pre>
		 *
		 * <code>bytes tag = 3;</code>
		 *
		 * @return The tag.
		 */
		@java.lang.Override
		public com.google.protobuf.ByteString getTag() {
			return tag_;
		}

		/**
		 * <pre>
		 * The authentication tag used for encryption. It provides integrity and authenticity assurance
		 * for the encrypted data.
		 * </pre>
		 *
		 * <code>bytes tag = 3;</code>
		 *
		 * @param value The tag to set.
		 * @return This builder for chaining.
		 */
		public Builder setTag(com.google.protobuf.ByteString value) {
			if (value == null) {
				throw new NullPointerException();
			}
			tag_ = value;
			bitField0_ |= 0x00000004;
			onChanged();
			return this;
		}

		/**
		 * <pre>
		 * The authentication tag used for encryption. It provides integrity and authenticity assurance
		 * for the encrypted data.
		 * </pre>
		 *
		 * <code>bytes tag = 3;</code>
		 *
		 * @return This builder for chaining.
		 */
		public Builder clearTag() {
			bitField0_ = (bitField0_ & ~0x00000004);
			tag_ = getDefaultInstance().getTag();
			onChanged();
			return this;
		}

		@java.lang.Override
		public final Builder setUnknownFields(
				final com.google.protobuf.UnknownFieldSet unknownFields) {
			return super.setUnknownFields(unknownFields);
		}

		@java.lang.Override
		public final Builder mergeUnknownFields(
				final com.google.protobuf.UnknownFieldSet unknownFields) {
			return super.mergeUnknownFields(unknownFields);
		}


		// @@protoc_insertion_point(builder_scope:vss.EncryptionMetadata)
	}

	// @@protoc_insertion_point(class_scope:vss.EncryptionMetadata)
	private static final org.vss.EncryptionMetadata DEFAULT_INSTANCE;

	static {
		DEFAULT_INSTANCE = new org.vss.EncryptionMetadata();
	}

	public static org.vss.EncryptionMetadata getDefaultInstance() {
		return DEFAULT_INSTANCE;
	}

	private static final com.google.protobuf.Parser<EncryptionMetadata>
			PARSER = new com.google.protobuf.AbstractParser<EncryptionMetadata>() {
		@java.lang.Override
		public EncryptionMetadata parsePartialFrom(
				com.google.protobuf.CodedInputStream input,
				com.google.protobuf.ExtensionRegistryLite extensionRegistry)
				throws com.google.protobuf.InvalidProtocolBufferException {
			Builder builder = newBuilder();
			try {
				builder.mergeFrom(input, extensionRegistry);
			} catch (com.google.protobuf.InvalidProtocolBufferException e) {
				throw e.setUnfinishedMessage(builder.buildPartial());
			} catch (com.google.protobuf.UninitializedMessageException e) {
				throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
			} catch (java.io.IOException e) {
				throw new com.google.protobuf.InvalidProtocolBufferException(e)
						.setUnfinishedMessage(builder.buildPartial());
			}
			return builder.buildPartial();
		}
	};

	public static com.google.protobuf.Parser<EncryptionMetadata> parser() {
		return PARSER;
	}

	@java.lang.Override
	public com.google.protobuf.Parser<EncryptionMetadata> getParserForType() {
		return PARSER;
	}

	@java.lang.Override
	public org.vss.EncryptionMetadata getDefaultInstanceForType() {
		return DEFAULT_INSTANCE;
	}

}

